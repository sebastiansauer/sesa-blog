<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dataviz on sesa blog</title>
    <link>https://data-se.netlify.app/tags/dataviz/</link>
    <description>Recent content in dataviz on sesa blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 28 Sep 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://data-se.netlify.app/tags/dataviz/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Programmatically plotting with ggplot2</title>
      <link>https://data-se.netlify.app/2022/09/28/programmatically-plotting-with-ggplot2/</link>
      <pubDate>Wed, 28 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://data-se.netlify.app/2022/09/28/programmatically-plotting-with-ggplot2/</guid>
      <description>1 Setup 2 Let‚Äôs go 2.1 Way 1 2.2 Way 2 2.3 Way 2 2.4 Way 3 2.5 Way 4 3 Further reading 4 Reproducibility 1 Setup library(tidyverse) # data wrangling library(easystats) # comfort in stats data(mtcars) In essence, we want to build this kind of plot programmatically:
mtcars %&amp;gt;% ggplot(aes(x=hp)) + geom_histogram() 2 Let‚Äôs go 2.1 Way 1 Let‚Äôs use unquoted variable names.
plot_descriptives0 &amp;lt;- function(data, var) { data %&amp;gt;% ggplot(aes(x = {{var}})) + geom_histogram() } plot_descriptives0(mtcars, hp) 2.</description>
    </item>
    
    <item>
      <title>German weather</title>
      <link>https://data-se.netlify.app/2022/07/24/german-weather/</link>
      <pubDate>Sun, 24 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://data-se.netlify.app/2022/07/24/german-weather/</guid>
      <description>1 Load packages 2 Motivation 3 Load data 4 Main temperature trajectory over time 4.1 Visualization 4.2 Linear model 5 Temperature change per month 5.1 Vis 1: Change per Month for whole of Germany 5.2 Linear model 5.3 Vis 2: Trend by Bundesland 6 Change per decade 6.1 Vis 1 6.2 Vis 2: Temperature change per decade 7 Change in variability 7.1 Vis 8 Debrief 9 Reproducibility 1 Load packages library(tidyverse) # data wrangling library(easystats) library(ggplot2); theme_set(theme_minimal()) # ggplot theme 2 Motivation Let‚Äôs explore the change over time in German weather.</description>
    </item>
    
    <item>
      <title>Overlaying facetted histograms with normal curve using ggplot2</title>
      <link>https://data-se.netlify.app/2021/06/23/overlaying-facetted-histograms-with-normal-curve-using-ggplot2/</link>
      <pubDate>Wed, 23 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://data-se.netlify.app/2021/06/23/overlaying-facetted-histograms-with-normal-curve-using-ggplot2/</guid>
      <description>Overlaying histograms with a normal curve Overlaying a histogram (possibly facetted) is not something far fetched when analyzing data. Surprisingly, it appears (to the best of my knowledge) that there‚Äôs no comfortable out-of-the-box solution in ggplot2, although it can be of course achieved with some lines of code. Here‚Äôs my take.
Setup library(tidyverse) Some data d &amp;lt;- read_csv(&amp;quot;https://vincentarelbundock.github.io/Rdatasets/csv/openintro/speed_gender_height.csv&amp;quot;) ## Warning: Missing column names filled in: &amp;#39;X1&amp;#39; [1] ## ## ‚îÄ‚îÄ Column specification ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ## cols( ## X1 = col_double(), ## speed = col_double(), ## gender = col_character(), ## height = col_double() ## ) glimpse(d) ## Rows: 1,325 ## Columns: 4 ## $ X1 &amp;lt;dbl&amp;gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, ‚Ä¶ ## $ speed &amp;lt;dbl&amp;gt; 85, 40, 87, 110, 110, 120, 90, 90, 80, 95, 110, 90, 110, 70, 10‚Ä¶ ## $ gender &amp;lt;chr&amp;gt; &amp;quot;female&amp;quot;, &amp;quot;male&amp;quot;, &amp;quot;female&amp;quot;, &amp;quot;female&amp;quot;, &amp;quot;male&amp;quot;, &amp;quot;female&amp;quot;, &amp;quot;female‚Ä¶ ## $ height &amp;lt;dbl&amp;gt; 69, 71, 64, 60, 70, 61, 65, 65, 61, 69, 63, 72, 70, 68, 63, 78,‚Ä¶ d %&amp;gt;% slice_head(n = 5) ## # A tibble: 5 x 4 ## X1 speed gender height ## &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; ## 1 1 85 female 69 ## 2 2 40 male 71 ## 3 3 87 female 64 ## 4 4 110 female 60 ## 5 5 110 male 70 Preparing data We‚Äôll use a ‚Äútotal‚Äù histogram for the whole sample, to that end, we‚Äôll need to remove the grouping information from the data.</description>
    </item>
    
    <item>
      <title>Kurzprofil: Datenvisualisierung Praxiskurs</title>
      <link>https://data-se.netlify.app/2021/06/16/datenvisualisierung-praxiskurs/</link>
      <pubDate>Wed, 16 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://data-se.netlify.app/2021/06/16/datenvisualisierung-praxiskurs/</guid>
      <description>1 √úberblick 2 Inhalte 2.1 Publikationsreife Diagramme 2.2 Dashboards 2.3 Automatisierte Berichte 2.4 Daten-Apps 3 Pr√ºfung 4 Voraussetzungen Literatur 1 √úberblick In diesem Modul lernen Sie Methoden der Datenvisualisierung f√ºr den Einsatz in der (Wirtschafts-)Praxis. Der Schwerpunkt liegt auf der praktischen F√§higkeit; theoretische Grundlagen spielen eine Nebenrolle. Alle Diagramme werden mit der Programmiersprache R erstellt.
2 Inhalte 2.1 Publikationsreife Diagramme Im Folgenden sind einige Beispiele f√ºr Diagramme dargestellt, die im Unterricht besprochen und ‚Äúnachgebaut‚Äù werden.</description>
    </item>
    
    <item>
      <title>Analyse der Impfbereitschaft von Studentis</title>
      <link>https://data-se.netlify.app/2021/05/30/analyse-der-impfbereitschaft-von-studentis/</link>
      <pubDate>Sun, 30 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://data-se.netlify.app/2021/05/30/analyse-der-impfbereitschaft-von-studentis/</guid>
      <description>1 Analyse der Impfbereitschaft 2 Vorbereitung 2.1 Pakete laden 2.2 Daten laden 2.3 Daten und Variablen 2.4 Sind die Items schon umgepolt? 2.5 Liegen Mittelwerte f√ºr die Pers√∂nlichkeits-Dimensionen vor? 3 Daten verstehen 3.1 Fehlende Werte 3.2 Nominal skalierte Variablen in numerische umwandeln 3.3 Welche Variablen korrelieren mit der Impfbereitschaft? 3.4 Korrelation der Items pro Big-Five-Dimension 4 Modell mit den Big-Five-Dimensionen als Pr√§diktoren 5 Zur Datenqualit√§t 6 Visualisierung 1 6.1 Median-Aufteilung 6.</description>
    </item>
    
    <item>
      <title>Bayesian modeling of populist party success in German federal elections - A notebook from the lab</title>
      <link>https://data-se.netlify.app/2018/08/25/bayesian-modeling-of-populist-party-success-in-german-federal-elections/</link>
      <pubDate>Sat, 25 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://data-se.netlify.app/2018/08/25/bayesian-modeling-of-populist-party-success-in-german-federal-elections/</guid>
      <description>Following up on an earlier post, we will model the voting success of the (most prominent) populist party, AfD, in the recent federal elections. This time, Bayesian modeling techniques will be used, drawing on the excellent textbook my McElreath.
Note that this post is rather a notebook of my thinking, doing, and erring. I‚Äôve made no efforts to hide scaffolding. I think it will be confusing to the uniniate and the initiate as well ‚Ä¶</description>
    </item>
    
    <item>
      <title>Intuition to Simpson&#39;s paradox</title>
      <link>https://data-se.netlify.app/2018/03/09/intuition-to-simpson-s-paradox/</link>
      <pubDate>Fri, 09 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://data-se.netlify.app/2018/03/09/intuition-to-simpson-s-paradox/</guid>
      <description>Say, you have to choose between two doctors (Anna and Berta). To decide which one is better, you check their success rates. Suppose that they deal with two conditions (Coolities and Dummities). So let‚Äôs compare their success rate for each of the two conditions (and the total success rate):
This is the proportion of healing (success) of the first doctor, Dr.¬†Anna for each of the two conditions:
Coolities: 7 out of 8 patients are healed from Coolities Dummieties: 1 out of 2 patients are healed from Dummities This is the proportion of healing (success) of the first doctor, Dr.</description>
    </item>
    
    <item>
      <title>Visualizing a logistic regression the easy way</title>
      <link>https://data-se.netlify.app/2018/01/23/visualizing-a-logistic-regression-the-easy-way/</link>
      <pubDate>Tue, 23 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://data-se.netlify.app/2018/01/23/visualizing-a-logistic-regression-the-easy-way/</guid>
      <description>Let‚Äôs visualize a GLM (logistic regression).
First laod some data:
data(tips, package = &amp;quot;reshape2&amp;quot;) Compute a glm:
glm_tips &amp;lt;- glm(sex ~ tip, data = tips, family = &amp;quot;binomial&amp;quot;) Plot the model using mosaic:
library(mosaic) plotModel(glm_tips) The curve does not look really s-typed (ogive) but that‚Äôs ok because the data suggest not a strong trend. The plot is not very beautiful either, but hey - it‚Äôs quick to produce üòÅ.</description>
    </item>
    
    <item>
      <title>Great dataviz examples in rstats</title>
      <link>https://data-se.netlify.app/2017/11/20/great-dataviz-examples-in-rstats/</link>
      <pubDate>Mon, 20 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://data-se.netlify.app/2017/11/20/great-dataviz-examples-in-rstats/</guid>
      <description>Here come some stunning examples of data visualizations, all built with R. R code of each diagram is available at the source. Enjoy! #beautiful.
UPDATE: I&amp;rsquo;ve included links to the R source!
Plotting geo maps along with subplots in ggplot2 I like this one by Ilya Kashnitsky:
Similarly, by the same author:
Source
Great work, @ikashnitsky!
Cirlize (Chord) diagrams Plotting association in a circular form yields aesthetic examples of diagrams, see the following examples</description>
    </item>
    
  </channel>
</rss>
