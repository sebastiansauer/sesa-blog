<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Plotting on sesa blog</title>
    <link>https://data-se.netlify.app/tags/plotting/</link>
    <description>Recent content in Plotting on sesa blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 22 Sep 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://data-se.netlify.app/tags/plotting/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Gantt-Diagramme mit ganttrify</title>
      <link>https://data-se.netlify.app/2023/09/22/gantt-diagramme-mit-ganttrify/</link>
      <pubDate>Fri, 22 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2023/09/22/gantt-diagramme-mit-ganttrify/</guid>
      <description></description>
    </item>
    <item>
      <title>Some ways to plot the distribution of each variable of a data frame</title>
      <link>https://data-se.netlify.app/2022/09/26/some-ways-to-plot-the-distribution-of-each-variable-of-a-data-frame/</link>
      <pubDate>Mon, 26 Sep 2022 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2022/09/26/some-ways-to-plot-the-distribution-of-each-variable-of-a-data-frame/</guid>
      <description>&lt;div id=&#34;TOC&#34;&gt;&#xD;&#xA;&lt;ul&gt;&#xD;&#xA;&lt;li&gt;&lt;a href=&#34;#motivation&#34; id=&#34;toc-motivation&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1&lt;/span&gt; Motivation&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;&lt;li&gt;&lt;a href=&#34;#load-packages&#34; id=&#34;toc-load-packages&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2&lt;/span&gt; Load packages&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;&lt;li&gt;&lt;a href=&#34;#load-data&#34; id=&#34;toc-load-data&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3&lt;/span&gt; Load data&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;&lt;li&gt;&lt;a href=&#34;#lets-plot&#34; id=&#34;toc-lets-plot&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4&lt;/span&gt; Let’s plot&lt;/a&gt;&#xD;&#xA;&lt;ul&gt;&#xD;&#xA;&lt;li&gt;&lt;a href=&#34;#way-1&#34; id=&#34;toc-way-1&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4.1&lt;/span&gt; Way 1&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;&lt;li&gt;&lt;a href=&#34;#way-2&#34; id=&#34;toc-way-2&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4.2&lt;/span&gt; Way 2&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;&lt;li&gt;&lt;a href=&#34;#way-3&#34; id=&#34;toc-way-3&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4.3&lt;/span&gt; Way 3&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;&lt;li&gt;&lt;a href=&#34;#way-4&#34; id=&#34;toc-way-4&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4.4&lt;/span&gt; Way 4&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xD;&#xA;&lt;li&gt;&lt;a href=&#34;#reproducibility&#34; id=&#34;toc-reproducibility&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;5&lt;/span&gt; Reproducibility&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;&lt;/ul&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&#xD;&#xA;&lt;div id=&#34;motivation&#34; class=&#34;section level1&#34; number=&#34;1&#34;&gt;&#xD;&#xA;&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; Motivation&lt;/h1&gt;&#xD;&#xA;&lt;p&gt;Often times, in explorative data analysis, one would like to plot the distribution of the relevant variables.&#xD;&#xA;Whereas ggplot provides handy tools to plot &lt;em&gt;one&lt;/em&gt; variable after each other,&#xD;&#xA;it would come handy to plot ’em all in one go.&lt;/p&gt;&#xD;&#xA;&lt;p&gt;Of course, there are many ways to achieve this comfort. This posts presents some of them in brevity.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Visualizing a log-y regression model</title>
      <link>https://data-se.netlify.app/2022/01/14/visualizing-a-log-y-regression-model/</link>
      <pubDate>Fri, 14 Jan 2022 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2022/01/14/visualizing-a-log-y-regression-model/</guid>
      <description>&lt;script src=&#34;https://data-se.netlify.app/2022/01/14/visualizing-a-log-y-regression-model/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&lt;div id=&#34;setup&#34; class=&#34;section level1&#34;&gt;&#xD;&#xA;&lt;h1&gt;Setup&lt;/h1&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&#xD;&#xA;data(mtcars)&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;div id=&#34;using-a-log-y-regression&#34; class=&#34;section level1&#34;&gt;&#xD;&#xA;&lt;h1&gt;Using a log-Y regression&lt;/h1&gt;&#xD;&#xA;&lt;p&gt;Gelman et al., in “Regression and other stories” are stating that “when additivity and linearity are not reasonable assumptions” it may sense to “take the logarithms of outcomes that are all positive” (p. 189).&lt;/p&gt;&#xD;&#xA;&lt;p&gt;A log-y regression can be defined as follows, in the simplest case:&lt;/p&gt;&#xD;&#xA;&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\text{log} \, y = b_0 + b_1X_1 + \ldots + \epsilon\]&lt;/span&gt;&#xD;&#xA;Exponentiating both sides yields&lt;/p&gt;</description>
    </item>
    <item>
      <title>Talent and Looks -- Collider bias</title>
      <link>https://data-se.netlify.app/2021/06/24/talent-and-looks-collider-bias/</link>
      <pubDate>Thu, 24 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2021/06/24/talent-and-looks-collider-bias/</guid>
      <description>&lt;script src=&#34;https://data-se.netlify.app/2021/06/24/talent-and-looks-collider-bias/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&lt;div id=&#34;background&#34; class=&#34;section level1&#34;&gt;&#xD;&#xA;&lt;h1&gt;Background&lt;/h1&gt;&#xD;&#xA;&lt;p&gt;Some musing on the collider bias.&lt;/p&gt;&#xD;&#xA;&lt;p&gt;Let’s try to reverse engineer this image&lt;/p&gt;&#xD;&#xA;&lt;p&gt;&lt;img src=&#34;https://brilliant-staff-media.s3-us-west-2.amazonaws.com/tiffany-wang/1Mvt8RPtlU.png&#34; style=&#34;width:70.0%&#34; /&gt;&lt;/p&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;div id=&#34;setup&#34; class=&#34;section level1&#34;&gt;&#xD;&#xA;&lt;h1&gt;Setup&lt;/h1&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&#xD;&#xA;library(ggdag)&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;div id=&#34;simulate-some-data&#34; class=&#34;section level1&#34;&gt;&#xD;&#xA;&lt;h1&gt;Simulate some data&lt;/h1&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;n &amp;lt;- 1000&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;&#xD;&#xA;d &amp;lt;- tibble(&#xD;&#xA;  x = rnorm(n, mean = 0, sd = 1),&#xD;&#xA;  y = rnorm(n, mean = 0, sd = 1),&#xD;&#xA;  e = rnorm(n, mean = 0, sd = 0.3),&#xD;&#xA;  z = abs(x) * abs(y))&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;div id=&#34;d-uncorrelated-data&#34; class=&#34;section level1&#34;&gt;&#xD;&#xA;&lt;h1&gt;d: Uncorrelated data&lt;/h1&gt;&#xD;&#xA;&lt;p&gt;The farer from the centroid the lighter the color.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to sort the labels of the legend in a ggplot-diagram</title>
      <link>https://data-se.netlify.app/2020/06/26/how-to-sort-the-labels-of-the-legend-in-a-ggplot-diagram/</link>
      <pubDate>Fri, 26 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2020/06/26/how-to-sort-the-labels-of-the-legend-in-a-ggplot-diagram/</guid>
      <description>&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&lt;div id=&#34;load-packages&#34; class=&#34;section level1&#34;&gt;&#xD;&#xA;&lt;h1&gt;Load packages&lt;/h1&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&#xD;&#xA;library(forcats)&#xD;&#xA;library(hrbrthemes)&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;div id=&#34;what-we-want-to-achieve-barplot-ggplot2-diagram-where-bars-and-legend-labels-are-sorted&#34; class=&#34;section level1&#34;&gt;&#xD;&#xA;&lt;h1&gt;What we want to achieve: barplot ggplot2-diagram where bars and legend labels are sorted&lt;/h1&gt;&#xD;&#xA;&lt;p&gt;Say we would like to plot frequencies, and would like to use &lt;code&gt;ggplot2&lt;/code&gt; for that purpose. How can we get a decent graph? This post shows some ways.&lt;/p&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;div id=&#34;some-data&#34; class=&#34;section level1&#34;&gt;&#xD;&#xA;&lt;h1&gt;Some data&lt;/h1&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data(diamonds)&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;div id=&#34;a-glimpse-to-the-data&#34; class=&#34;section level1&#34;&gt;&#xD;&#xA;&lt;h1&gt;A glimpse to the data&lt;/h1&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;glimpse(diamonds)&#xD;&#xA;#&amp;gt; Rows: 53,940&#xD;&#xA;#&amp;gt; Columns: 10&#xD;&#xA;#&amp;gt; $ carat   &amp;lt;dbl&amp;gt; 0.23, 0.21, 0.23, 0.29, 0.31, 0.24, 0.24, 0.26, 0.22, 0.23, 0…&#xD;&#xA;#&amp;gt; $ cut     &amp;lt;ord&amp;gt; Ideal, Premium, Good, Premium, Good, Very Good, Very Good, Ve…&#xD;&#xA;#&amp;gt; $ color   &amp;lt;ord&amp;gt; E, E, E, I, J, J, I, H, E, H, J, J, F, J, E, E, I, J, J, J, I…&#xD;&#xA;#&amp;gt; $ clarity &amp;lt;ord&amp;gt; SI2, SI1, VS1, VS2, SI2, VVS2, VVS1, SI1, VS2, VS1, SI1, VS1,…&#xD;&#xA;#&amp;gt; $ depth   &amp;lt;dbl&amp;gt; 61.5, 59.8, 56.9, 62.4, 63.3, 62.8, 62.3, 61.9, 65.1, 59.4, 6…&#xD;&#xA;#&amp;gt; $ table   &amp;lt;dbl&amp;gt; 55, 61, 65, 58, 58, 57, 57, 55, 61, 61, 55, 56, 61, 54, 62, 5…&#xD;&#xA;#&amp;gt; $ price   &amp;lt;int&amp;gt; 326, 326, 327, 334, 335, 336, 336, 337, 337, 338, 339, 340, 3…&#xD;&#xA;#&amp;gt; $ x       &amp;lt;dbl&amp;gt; 3.95, 3.89, 4.05, 4.20, 4.34, 3.94, 3.95, 4.07, 3.87, 4.00, 4…&#xD;&#xA;#&amp;gt; $ y       &amp;lt;dbl&amp;gt; 3.98, 3.84, 4.07, 4.23, 4.35, 3.96, 3.98, 4.11, 3.78, 4.05, 4…&#xD;&#xA;#&amp;gt; $ z       &amp;lt;dbl&amp;gt; 2.43, 2.31, 2.31, 2.63, 2.75, 2.48, 2.47, 2.53, 2.49, 2.39, 2…&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;div id=&#34;plot-1-basic-bar-plot&#34; class=&#34;section level1&#34;&gt;&#xD;&#xA;&lt;h1&gt;Plot 1: Basic bar plot&lt;/h1&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;diamonds %&amp;gt;% &#xD;&#xA;  ggplot(aes(cut)) +&#xD;&#xA;  geom_bar()&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;p&gt;&lt;img src=&#34;https://data-se.netlify.app/post/2020-06-26-how-to-sort-the-labels-of-the-legend-in-a-ggplot-diagram_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;70%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Plot for mean comparison</title>
      <link>https://data-se.netlify.app/2020/06/02/plot-for-mean-comparison/</link>
      <pubDate>Tue, 02 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2020/06/02/plot-for-mean-comparison/</guid>
      <description>&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&lt;div id=&#34;load-packages&#34; class=&#34;section level1&#34;&gt;&#xD;&#xA;&lt;h1&gt;Load packages&lt;/h1&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&#xD;&#xA;library(reshape2)  # for data&#xD;&#xA;library(mosaic)&#xD;&#xA;library(sjmisc)&#xD;&#xA;library(skimr)&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;div id=&#34;data-setup&#34; class=&#34;section level1&#34;&gt;&#xD;&#xA;&lt;h1&gt;Data setup&lt;/h1&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data(tips)&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;div id=&#34;aggregate-data-per-group&#34; class=&#34;section level1&#34;&gt;&#xD;&#xA;&lt;h1&gt;Aggregate data per group&lt;/h1&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tips_aggr &amp;lt;- tips %&amp;gt;% &#xD;&#xA;  group_by(smoker) %&amp;gt;% &#xD;&#xA;  summarise(tip_avg = mean(tip),&#xD;&#xA;            tip_md = median(tip),&#xD;&#xA;            tip_sd = sd(tip),&#xD;&#xA;            tip_iqr = IQR(tip))&#xD;&#xA;&#xD;&#xA;tips_aggr&#xD;&#xA;#&amp;gt; # A tibble: 2 x 5&#xD;&#xA;#&amp;gt;   smoker tip_avg tip_md tip_sd tip_iqr&#xD;&#xA;#&amp;gt;   &amp;lt;fct&amp;gt;    &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;&#xD;&#xA;#&amp;gt; 1 No        2.99   2.74   1.38    1.50&#xD;&#xA;#&amp;gt; 2 Yes       3.01   3      1.40    1.68&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;p&gt;The same lines, more concisely:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Plotting a correlated bivariate Gaussian</title>
      <link>https://data-se.netlify.app/2020/05/30/plotting-a-correlated-bivariate-gaussian/</link>
      <pubDate>Sat, 30 May 2020 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2020/05/30/plotting-a-correlated-bivariate-gaussian/</guid>
      <description>&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/plotly-binding/plotly.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/typedarray/typedarray.min.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/jquery/jquery.min.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;link href=&#34;https://data-se.netlify.app/rmarkdown-libs/crosstalk/css/crosstalk.css&#34; rel=&#34;stylesheet&#34; /&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/crosstalk/js/crosstalk.min.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;link href=&#34;https://data-se.netlify.app/rmarkdown-libs/plotly-htmlwidgets-css/plotly-htmlwidgets.css&#34; rel=&#34;stylesheet&#34; /&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/plotly-main/plotly-latest.min.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&lt;div id=&#34;load-packages&#34; class=&#34;section level1&#34;&gt;&#xD;&#xA;&lt;h1&gt;Load packages&lt;/h1&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&#xD;&#xA;library(rockchalk)&#xD;&#xA;library(MASS)&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;div id=&#34;defining-the-data&#34; class=&#34;section level1&#34;&gt;&#xD;&#xA;&lt;h1&gt;Defining the data&lt;/h1&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;myR &amp;lt;- lazyCor(X = 0.7, d = 2)&#xD;&#xA;mySD &amp;lt;- c(1, 1)&#xD;&#xA;myCov &amp;lt;- lazyCov(Rho = myR, Sd = mySD)&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;myR&#xD;&#xA;#&amp;gt;      [,1] [,2]&#xD;&#xA;#&amp;gt; [1,]  1.0  0.7&#xD;&#xA;#&amp;gt; [2,]  0.7  1.0&#xD;&#xA;mySD&#xD;&#xA;#&amp;gt; [1] 1 1&#xD;&#xA;myCov&#xD;&#xA;#&amp;gt;      [,1] [,2]&#xD;&#xA;#&amp;gt; [1,]  1.0  0.7&#xD;&#xA;#&amp;gt; [2,]  0.7  1.0&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;div id=&#34;drawing-from-the-multivariate-normal&#34; class=&#34;section level1&#34;&gt;&#xD;&#xA;&lt;h1&gt;Drawing from the multivariate normal&lt;/h1&gt;&#xD;&#xA;&lt;p&gt;Let’s draw 1000 cases. Met &lt;span class=&#34;math inline&#34;&gt;\(\mu\)&lt;/span&gt; be zero.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Various methods for plotting 3d bivariate Gaussians</title>
      <link>https://data-se.netlify.app/2020/05/30/various-methods-for-plotting-3d-bivariate-gaussians/</link>
      <pubDate>Sat, 30 May 2020 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2020/05/30/various-methods-for-plotting-3d-bivariate-gaussians/</guid>
      <description>&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/plotly-binding/plotly.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/typedarray/typedarray.min.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/jquery/jquery.min.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;link href=&#34;https://data-se.netlify.app/rmarkdown-libs/crosstalk/css/crosstalk.css&#34; rel=&#34;stylesheet&#34; /&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/crosstalk/js/crosstalk.min.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;link href=&#34;https://data-se.netlify.app/rmarkdown-libs/plotly-htmlwidgets-css/plotly-htmlwidgets.css&#34; rel=&#34;stylesheet&#34; /&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/plotly-main/plotly-latest.min.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/threejs/three.min.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/threejs/Detector.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/threejs/Projector.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/threejs/CanvasRenderer.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/threejs/TrackballControls.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/threejs/StateOrbitControls.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/scatterplotThree-binding/scatterplotThree.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&lt;div id=&#34;load-packages&#34; class=&#34;section level1&#34;&gt;&#xD;&#xA;&lt;h1&gt;Load packages&lt;/h1&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;div id=&#34;motivation&#34; class=&#34;section level1&#34;&gt;&#xD;&#xA;&lt;h1&gt;Motivation&lt;/h1&gt;&#xD;&#xA;&lt;p&gt;This post is a compilation, rather uncommented compilation, of various methods of plotting 3D (bivariate) Gaussian distributions in R.&lt;/p&gt;&#xD;&#xA;&lt;p&gt;I add the source to each method.&lt;/p&gt;&#xD;&#xA;&lt;p&gt;Note that some methods (5, 6) open a interactive window wihich is not supported here. I added a static version of the plot then.&lt;/p&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;div id=&#34;method-1&#34; class=&#34;section level1&#34;&gt;&#xD;&#xA;&lt;h1&gt;Method 1&lt;/h1&gt;&#xD;&#xA;&lt;p&gt;Source: &lt;a href=&#34;https://codegolf.stackexchange.com/questions/123039/plot-the-gaussian-distribution-in-3d&#34; class=&#34;uri&#34;&gt;https://codegolf.stackexchange.com/questions/123039/plot-the-gaussian-distribution-in-3d&lt;/a&gt;&lt;/p&gt;&#xD;&#xA;&lt;p&gt;Feel free to change the sd, &lt;code&gt;s&lt;/code&gt; in the code below.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Pictogram waffle plot using emojifont</title>
      <link>https://data-se.netlify.app/2019/11/25/pictogram-waffle-plot-using-emojifont/</link>
      <pubDate>Mon, 25 Nov 2019 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2019/11/25/pictogram-waffle-plot-using-emojifont/</guid>
      <description>&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&lt;div id=&#34;load-packages&#34; class=&#34;section level1&#34;&gt;&#xD;&#xA;&lt;h1&gt;Load packages&lt;/h1&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&#xD;&#xA;library(emojifont)&#xD;&#xA;library(showtext)&#xD;&#xA;library(ggpubr)&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;div id=&#34;pictogram-waffle-plot&#34; class=&#34;section level1&#34;&gt;&#xD;&#xA;&lt;h1&gt;Pictogram waffle plot&lt;/h1&gt;&#xD;&#xA;&lt;p&gt;A Pictogram may be defined as a (statistical) diagram using icons or similar “iconic” graphics to illstrate stuff. The waffle plot (see &lt;a href=&#34;https://data-se.netlify.com/2019/11/24/how-to-draw-a-waffle-plot/&#34;&gt;this post&lt;/a&gt;) is a nice object where to combine waffle and pictorgrams. Originally, this post was inspired by HRBRMSTR waffle package, see this &lt;a href=&#34;https://github.com/hrbrmstr/waffle&#34;&gt;post&lt;/a&gt;, but I could not get it running.&lt;/p&gt;&#xD;&#xA;&lt;p&gt;Maybe the easiest way is to work through an example (spoiler: see below for what we’re heading at).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Plotting functions in 3d</title>
      <link>https://data-se.netlify.app/2019/11/19/plotting-functions-in-3d/</link>
      <pubDate>Tue, 19 Nov 2019 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2019/11/19/plotting-functions-in-3d/</guid>
      <description>&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;link href=&#34;https://data-se.netlify.app/rmarkdown-libs/anchor-sections/anchor-sections.css&#34; rel=&#34;stylesheet&#34; /&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/anchor-sections/anchor-sections.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/plotly-binding/plotly.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/typedarray/typedarray.min.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/jquery/jquery.min.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;link href=&#34;https://data-se.netlify.app/rmarkdown-libs/crosstalk/css/crosstalk.css&#34; rel=&#34;stylesheet&#34; /&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/crosstalk/js/crosstalk.min.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;link href=&#34;https://data-se.netlify.app/rmarkdown-libs/plotly-htmlwidgets-css/plotly-htmlwidgets.css&#34; rel=&#34;stylesheet&#34; /&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/plotly-main/plotly-latest.min.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&lt;div id=&#34;load-packages&#34; class=&#34;section level1&#34;&gt;&#xD;&#xA;&lt;h1&gt;Load packages&lt;/h1&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&#xD;&#xA;library(mosaic)&#xD;&#xA;library(plotly)&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;div id=&#34;gimme-a-function&#34; class=&#34;section level1&#34;&gt;&#xD;&#xA;&lt;h1&gt;Gimme a function&lt;/h1&gt;&#xD;&#xA;&lt;p&gt;Say, you have some function such as&lt;/p&gt;&#xD;&#xA;&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[&#xD;&#xA;f(x) = x^2+z^2&#xD;&#xA;\]&lt;/span&gt;&lt;/p&gt;&#xD;&#xA;&lt;p&gt;In more R-ish:&lt;/p&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;f &amp;lt;- makeFun(x^2 + z^2 ~ x &amp;amp; z)&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;p&gt;And you would like to plot it.&lt;/p&gt;&#xD;&#xA;&lt;p&gt;Observe that this function has &lt;em&gt;two&lt;/em&gt; input (independent) variables, &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(z\)&lt;/span&gt;, plus one output (dependent) variables, &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt;.&lt;/p&gt;&#xD;&#xA;&lt;p&gt;The thing is, you’ll need to define the values for a number of output values for &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt;, as defined by the function.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Geoplotting - update to my MODAR-book</title>
      <link>https://data-se.netlify.app/2019/07/29/geoplotting-update-to-my-modar-book/</link>
      <pubDate>Mon, 29 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2019/07/29/geoplotting-update-to-my-modar-book/</guid>
      <description>&lt;p&gt;In my &lt;a href=&#34;https://link.springer.com/book/10.1007%2F978-3-658-21587-3&#34;&gt;book&lt;/a&gt; on modern data analyisis using R, I show some basics of geoplotting. It seems that some software update for the package &lt;a href=&#34;https://github.com/r-spatial/sf&#34;&gt;simple features&lt;/a&gt; broke my code. So, here ’s some update.&lt;/p&gt;&#xD;&#xA;&lt;div id=&#34;load-packages-and-data&#34; class=&#34;section level1&#34;&gt;&#xD;&#xA;&lt;h1&gt;Load packages and data&lt;/h1&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&#xD;&#xA;library(viridis)&#xD;&#xA;library(sf)&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;data(socec, package = &amp;quot;pradadata&amp;quot;)&#xD;&#xA;data(wahlkreise_shp, package = &amp;quot;pradadata&amp;quot;)&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;div id=&#34;check-data&#34; class=&#34;section level1&#34;&gt;&#xD;&#xA;&lt;h1&gt;Check data&lt;/h1&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;glimpse(socec)&#xD;&#xA;#&amp;gt; Observations: 316&#xD;&#xA;#&amp;gt; Variables: 51&#xD;&#xA;#&amp;gt; $ V01 &amp;lt;chr&amp;gt; &amp;quot;Schleswig-Holstein&amp;quot;, &amp;quot;Schleswig-Holstein&amp;quot;, &amp;quot;Schleswig-Holst…&#xD;&#xA;#&amp;gt; $ V02 &amp;lt;int&amp;gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 901, 12, 13, 14, 15, 16, …&#xD;&#xA;#&amp;gt; $ V03 &amp;lt;chr&amp;gt; &amp;quot;Flensburg – Schleswig&amp;quot;, &amp;quot;Nordfriesland – Dithmarschen Nord&amp;quot;…&#xD;&#xA;#&amp;gt; $ V04 &amp;lt;int&amp;gt; 130, 197, 178, 163, 3, 92, 49, 95, 49, 126, 28, 1110, 132, 1…&#xD;&#xA;#&amp;gt; $ V05 &amp;lt;dbl&amp;gt; 2128.1, 2777.0, 2000.5, 2164.8, 143.0, 1302.0, 664.3, 1333.4…&#xD;&#xA;#&amp;gt; $ V06 &amp;lt;dbl&amp;gt; 282.8, 232.3, 220.8, 248.7, 268.0, 219.8, 307.5, 313.2, 219.…&#xD;&#xA;#&amp;gt; $ V07 &amp;lt;dbl&amp;gt; 266.7, 219.7, 209.8, 239.4, 242.9, 206.8, 281.5, 294.9, 209.…&#xD;&#xA;#&amp;gt; $ V08 &amp;lt;dbl&amp;gt; 5.7, 5.4, 5.0, 3.7, 9.4, 5.9, 8.4, 5.8, 4.3, 6.6, 8.0, 6.3, …&#xD;&#xA;#&amp;gt; $ V09 &amp;lt;dbl&amp;gt; 132.9, 83.6, 110.4, 114.9, 1873.8, 168.8, 462.9, 234.9, 143.…&#xD;&#xA;#&amp;gt; $ V10 &amp;lt;dbl&amp;gt; -3.7, -5.0, -5.3, -3.4, -0.1, -4.9, -2.3, -1.6, -6.5, -3.7, …&#xD;&#xA;#&amp;gt; $ V11 &amp;lt;dbl&amp;gt; 12.3, 13.2, 11.9, 10.0, 11.9, 21.0, 13.1, 9.2, 13.2, 16.8, 1…&#xD;&#xA;#&amp;gt; $ V12 &amp;lt;dbl&amp;gt; 16.5, 16.1, 16.7, 17.3, 14.6, 16.4, 16.8, 17.1, 15.0, 16.8, …&#xD;&#xA;#&amp;gt; $ V13 &amp;lt;dbl&amp;gt; 8.7, 8.0, 7.6, 7.2, 10.8, 7.3, 7.2, 6.9, 6.7, 6.6, 8.2, 7.7,…&#xD;&#xA;#&amp;gt; $ V14 &amp;lt;dbl&amp;gt; 11.3, 10.4, 9.9, 9.4, 17.4, 10.1, 10.7, 10.5, 9.1, 10.1, 13.…&#xD;&#xA;#&amp;gt; $ V15 &amp;lt;dbl&amp;gt; 35.0, 35.1, 37.0, 37.2, 32.8, 35.8, 37.4, 37.9, 36.1, 36.9, …&#xD;&#xA;#&amp;gt; $ V16 &amp;lt;dbl&amp;gt; 17.4, 18.5, 17.4, 17.9, 14.8, 18.3, 16.7, 17.0, 20.0, 17.3, …&#xD;&#xA;#&amp;gt; $ V17 &amp;lt;dbl&amp;gt; 11.2, 11.9, 11.4, 11.0, 9.6, 12.1, 11.2, 10.5, 13.1, 12.3, 1…&#xD;&#xA;#&amp;gt; $ V18 &amp;lt;dbl&amp;gt; 90.0, 92.0, 90.8, 91.5, 82.0, 89.2, 85.0, 86.7, 91.6, 87.3, …&#xD;&#xA;#&amp;gt; $ V19 &amp;lt;dbl&amp;gt; 10.0, 8.0, 9.2, 8.5, 18.0, 10.8, 15.0, 13.3, 8.4, 12.7, 16.5…&#xD;&#xA;#&amp;gt; $ V20 &amp;lt;dbl&amp;gt; 5.1, 5.2, 4.2, 4.9, 7.3, 5.6, 6.4, 5.8, 6.1, 6.8, 8.1, 6.0, …&#xD;&#xA;#&amp;gt; $ V21 &amp;lt;dbl&amp;gt; 59.5, 65.0, 59.9, 58.3, 41.8, 54.1, 40.9, 44.1, 57.6, 44.1, …&#xD;&#xA;#&amp;gt; $ V22 &amp;lt;dbl&amp;gt; 35.5, 29.8, 35.9, 36.8, 50.9, 40.3, 52.7, 50.1, 36.3, 49.0, …&#xD;&#xA;#&amp;gt; $ V23 &amp;lt;dbl&amp;gt; 49.4, 58.8, 59.4, 58.7, 29.5, 53.0, 52.8, 54.6, 55.9, 55.6, …&#xD;&#xA;#&amp;gt; $ V24 &amp;lt;dbl&amp;gt; 3.8, 6.0, 2.4, 5.5, 1.3, 2.4, 6.0, 3.1, 4.7, 2.8, 2.7, 3.7, …&#xD;&#xA;#&amp;gt; $ V25 &amp;lt;dbl&amp;gt; 514.6, 566.1, 493.0, 492.2, 539.3, 501.9, 484.6, 469.6, 551.…&#xD;&#xA;#&amp;gt; $ V26 &amp;lt;int&amp;gt; 20265, 22159, 20896, 22093, 18637, 20395, 23766, 22791, 2196…&#xD;&#xA;#&amp;gt; $ V27 &amp;lt;int&amp;gt; 28300, 30078, 29298, 26659, 42836, 25983, 26342, 29135, 2335…&#xD;&#xA;#&amp;gt; $ V28 &amp;lt;dbl&amp;gt; 696.9, 748.1, 724.5, 733.3, 518.2, 673.6, 651.9, 712.1, 719.…&#xD;&#xA;#&amp;gt; $ V29 &amp;lt;chr&amp;gt; &amp;quot;4,4&amp;quot;, &amp;quot;4&amp;quot;, &amp;quot;2,7&amp;quot;, &amp;quot;2,4&amp;quot;, &amp;quot;4,8&amp;quot;, &amp;quot;4&amp;quot;, &amp;quot;2,1&amp;quot;, &amp;quot;2&amp;quot;, &amp;quot;3&amp;quot;, &amp;quot;2&amp;quot;, …&#xD;&#xA;#&amp;gt; $ V30 &amp;lt;dbl&amp;gt; 11.9, 11.5, 11.7, 9.4, 8.7, 11.6, 11.0, 10.4, 10.0, 9.2, 9.2…&#xD;&#xA;#&amp;gt; $ V31 &amp;lt;dbl&amp;gt; 8.2, 7.9, 7.8, 7.4, 6.6, 7.9, 6.0, 6.2, 9.8, 6.8, 9.5, 7.5, …&#xD;&#xA;#&amp;gt; $ V32 &amp;lt;dbl&amp;gt; 19.8, 19.9, 19.1, 18.2, 15.2, 18.5, 14.8, 16.7, 19.4, 16.3, …&#xD;&#xA;#&amp;gt; $ V33 &amp;lt;dbl&amp;gt; 41.6, 48.8, 44.1, 43.6, 34.5, 39.0, 40.1, 41.2, 41.3, 39.1, …&#xD;&#xA;#&amp;gt; $ V34 &amp;lt;dbl&amp;gt; 30.4, 23.4, 29.0, 30.9, 43.6, 34.6, 39.1, 35.9, 29.4, 37.9, …&#xD;&#xA;#&amp;gt; $ V35 &amp;lt;dbl&amp;gt; 41.1, 33.9, 35.0, 37.1, 42.1, 37.5, 40.2, 47.5, 33.4, 43.1, …&#xD;&#xA;#&amp;gt; $ V36 &amp;lt;dbl&amp;gt; 44.0, 60.9, 43.8, 41.6, 37.9, 41.6, 48.5, 48.3, 51.1, 45.9, …&#xD;&#xA;#&amp;gt; $ V37 &amp;lt;dbl&amp;gt; 7.3, 9.2, 7.1, 6.9, 4.2, 6.7, 7.2, 7.3, 7.3, 6.8, 5.5, 6.9, …&#xD;&#xA;#&amp;gt; $ V38 &amp;lt;dbl&amp;gt; 337.4, 337.6, 290.2, 276.1, 473.7, 312.4, 290.2, 333.4, 300.…&#xD;&#xA;#&amp;gt; $ V39 &amp;lt;chr&amp;gt; &amp;quot;1,6&amp;quot;, &amp;quot;2,6&amp;quot;, &amp;quot;2,7&amp;quot;, &amp;quot;2,4&amp;quot;, &amp;quot;0,2&amp;quot;, &amp;quot;1,7&amp;quot;, &amp;quot;2,3&amp;quot;, &amp;quot;1,1&amp;quot;, &amp;quot;1,5…&#xD;&#xA;#&amp;gt; $ V40 &amp;lt;chr&amp;gt; &amp;quot;18,7&amp;quot;, &amp;quot;19,9&amp;quot;, &amp;quot;28,3&amp;quot;, &amp;quot;24,4&amp;quot;, &amp;quot;16&amp;quot;, &amp;quot;22,5&amp;quot;, &amp;quot;29,5&amp;quot;, &amp;quot;27,8&amp;quot;…&#xD;&#xA;#&amp;gt; $ V41 &amp;lt;chr&amp;gt; &amp;quot;28,1&amp;quot;, &amp;quot;33,4&amp;quot;, &amp;quot;22,9&amp;quot;, &amp;quot;23&amp;quot;, &amp;quot;20,1&amp;quot;, &amp;quot;29,1&amp;quot;, &amp;quot;29&amp;quot;, &amp;quot;29,3&amp;quot;, …&#xD;&#xA;#&amp;gt; $ V42 &amp;lt;chr&amp;gt; &amp;quot;16,4&amp;quot;, &amp;quot;12,4&amp;quot;, &amp;quot;15,9&amp;quot;, &amp;quot;15,5&amp;quot;, &amp;quot;25,2&amp;quot;, &amp;quot;17,6&amp;quot;, &amp;quot;17,2&amp;quot;, &amp;quot;17,…&#xD;&#xA;#&amp;gt; $ V43 &amp;lt;dbl&amp;gt; 35.2, 31.7, 30.3, 34.7, 38.6, 29.1, 22.0, 24.3, 33.4, 26.5, …&#xD;&#xA;#&amp;gt; $ V44 &amp;lt;dbl&amp;gt; 88.5, 70.9, 80.1, 59.4, 138.7, 86.8, 67.7, 54.5, 62.6, 59.5,…&#xD;&#xA;#&amp;gt; $ V45 &amp;lt;dbl&amp;gt; 26.3, 26.2, 26.0, 28.1, 26.4, 26.2, 28.8, 28.5, 24.9, 27.8, …&#xD;&#xA;#&amp;gt; $ V46 &amp;lt;dbl&amp;gt; 18.8, 16.7, 21.1, 23.8, 28.3, 22.1, 34.6, 28.3, 20.2, 28.7, …&#xD;&#xA;#&amp;gt; $ V47 &amp;lt;dbl&amp;gt; 7.2, 7.2, 6.6, 5.1, 8.8, 6.9, 5.2, 4.6, 6.2, 4.8, 8.7, 6.4, …&#xD;&#xA;#&amp;gt; $ V48 &amp;lt;dbl&amp;gt; 8.2, 7.7, 7.2, 5.5, 10.0, 7.5, 5.6, 4.9, 6.6, 5.1, 9.4, 6.9,…&#xD;&#xA;#&amp;gt; $ V49 &amp;lt;dbl&amp;gt; 6.2, 6.6, 6.0, 4.7, 7.6, 6.4, 4.8, 4.2, 5.7, 4.5, 8.0, 5.8, …&#xD;&#xA;#&amp;gt; $ V50 &amp;lt;dbl&amp;gt; 4.2, 3.6, 5.2, 3.2, 6.1, 4.4, 3.3, 2.7, 3.7, 3.2, 5.7, 4.0, …&#xD;&#xA;#&amp;gt; $ V51 &amp;lt;dbl&amp;gt; 7.3, 8.4, 6.6, 5.6, 8.7, 7.7, 6.4, 5.1, 7.4, 5.5, 9.0, 6.9, …&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;glimpse(wahlkreise_shp)&#xD;&#xA;#&amp;gt; Observations: 299&#xD;&#xA;#&amp;gt; Variables: 5&#xD;&#xA;#&amp;gt; $ WKR_NR    &amp;lt;int&amp;gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,…&#xD;&#xA;#&amp;gt; $ LAND_NR   &amp;lt;fct&amp;gt; 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 13, 13, 13…&#xD;&#xA;#&amp;gt; $ LAND_NAME &amp;lt;fct&amp;gt; Schleswig-Holstein, Schleswig-Holstein, Schleswig-Hols…&#xD;&#xA;#&amp;gt; $ WKR_NAME  &amp;lt;fct&amp;gt; Flensburg – Schleswig, Nordfriesland – Dithmarschen No…&#xD;&#xA;#&amp;gt; $ geometry  &amp;lt;MULTIPOLYGON [m]&amp;gt; MULTIPOLYGON (((543474.9 60..., MULTIPOLY…&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;p&gt;Let’s pick only a few columns to make life easier:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ornaments with ggformula</title>
      <link>https://data-se.netlify.app/2019/02/12/ornaments-with-gformula/</link>
      <pubDate>Tue, 12 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2019/02/12/ornaments-with-gformula/</guid>
      <description>&lt;p&gt;Since some time, there’s a wrapper for &lt;code&gt;ggplot2&lt;/code&gt; available, bundled in the package &lt;code&gt;ggformula&lt;/code&gt;. One nice thing is that in that it plays nicely with the popular R package &lt;code&gt;mosaic&lt;/code&gt;. &lt;code&gt;mosaic&lt;/code&gt; provides some useful functions for modeling along with a tamed and consistent syntax. In this post, we will discuss some “ornaments”, that is, some details of beautification of a plot. I confess that every one will deem it central, but in some cases in comes in handy to know how to “refine” a plot using &lt;code&gt;ggformula&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Barplots with mosaic</title>
      <link>https://data-se.netlify.app/2019/01/10/barplots-with-mosaic/</link>
      <pubDate>Thu, 10 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2019/01/10/barplots-with-mosaic/</guid>
      <description>&lt;p&gt;Plotting barplots is a frequent endeavor for the analysis of qualitative data. Numerous methods for plotting barplots exist; the popular R package &lt;code&gt;mosaic&lt;/code&gt; also provides methods.&lt;/p&gt;&#xD;&#xA;&lt;p&gt;More recently, &lt;code&gt;mosaic&lt;/code&gt; switched to a ggplot wrapper for plotting diagrams, that is &lt;code&gt;gf_XXX()&lt;/code&gt;, packaged in &lt;code&gt;ggformula&lt;/code&gt;. That implies that input data is expected to be tidy, because ggplot, a central member of the tidyverse, excepts its input data to be tidy.&lt;/p&gt;&#xD;&#xA;&lt;p&gt;Let’s check an example.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Visualizing a multivariate normal distribution</title>
      <link>https://data-se.netlify.app/2018/12/13/visualizing-a-multivariate-normal-distribution/</link>
      <pubDate>Thu, 13 Dec 2018 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2018/12/13/visualizing-a-multivariate-normal-distribution/</guid>
      <description>&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/plotly-binding/plotly.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/typedarray/typedarray.min.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/jquery/jquery.min.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;link href=&#34;https://data-se.netlify.app/rmarkdown-libs/crosstalk/css/crosstalk.css&#34; rel=&#34;stylesheet&#34; /&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/crosstalk/js/crosstalk.min.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;link href=&#34;https://data-se.netlify.app/rmarkdown-libs/plotly-htmlwidgets-css/plotly-htmlwidgets.css&#34; rel=&#34;stylesheet&#34; /&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/plotly-main/plotly-latest.min.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;In R, it is quite straight forward to plot a normal distribution, eg., using the package &lt;code&gt;ggplot2&lt;/code&gt; or plotly.&lt;/p&gt;&#xD;&#xA;&lt;div id=&#34;setup&#34; class=&#34;section level1&#34;&gt;&#xD;&#xA;&lt;h1&gt;Setup&lt;/h1&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&#xD;&#xA;library(mvtnorm)&#xD;&#xA;library(plotly)&#xD;&#xA;library(MASS)&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;div id=&#34;simulate-multivariate-normal-data&#34; class=&#34;section level1&#34;&gt;&#xD;&#xA;&lt;h1&gt;Simulate multivariate normal data&lt;/h1&gt;&#xD;&#xA;&lt;p&gt;First, let’s define a covariance matrix &lt;span class=&#34;math inline&#34;&gt;\(\Sigma\)&lt;/span&gt;:&lt;/p&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sigma &amp;lt;- matrix(c(4,2,2,3), ncol = 2)&#xD;&#xA;sigma&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;pre&gt;&lt;code&gt;##      [,1] [,2]&#xD;&#xA;## [1,]    4    2&#xD;&#xA;## [2,]    2    3&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;p&gt;Then, simulate observations n = &lt;code&gt;n&lt;/code&gt; from these covariance matrix; the means need be defined, too. As the rank of our covariance matrix is 2, we need two means:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Visualizing a regression plane (two predictors)</title>
      <link>https://data-se.netlify.app/2018/12/13/visualizing-a-regression-plane-two-predictors/</link>
      <pubDate>Thu, 13 Dec 2018 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2018/12/13/visualizing-a-regression-plane-two-predictors/</guid>
      <description>&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/plotly-binding/plotly.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/typedarray/typedarray.min.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/jquery/jquery.min.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;link href=&#34;https://data-se.netlify.app/rmarkdown-libs/crosstalk/css/crosstalk.css&#34; rel=&#34;stylesheet&#34; /&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/crosstalk/js/crosstalk.min.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;link href=&#34;https://data-se.netlify.app/rmarkdown-libs/plotly-htmlwidgets-css/plotly-htmlwidgets.css&#34; rel=&#34;stylesheet&#34; /&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/plotly-main/plotly-latest.min.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;Plotting a “simple” regression (one regression) is pretty straight forward in R.&lt;/p&gt;&#xD;&#xA;&lt;div id=&#34;setup&#34; class=&#34;section level1&#34;&gt;&#xD;&#xA;&lt;h1&gt;Setup&lt;/h1&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&#xD;&#xA;data(mtcars)&#xD;&#xA;library(mosaic)&#xD;&#xA;library(modelr)&#xD;&#xA;library(plotly)&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;div id=&#34;define-model&#34; class=&#34;section level1&#34;&gt;&#xD;&#xA;&lt;h1&gt;Define model&lt;/h1&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lm1 &amp;lt;- lm(mpg ~ hp, data = mtcars)&#xD;&#xA;&#xD;&#xA;mtcars &amp;lt;- mtcars %&amp;gt;% &#xD;&#xA;  mutate(lm1_pred = predict(lm1))&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;div id=&#34;plot&#34; class=&#34;section level1&#34;&gt;&#xD;&#xA;&lt;h1&gt;Plot&lt;/h1&gt;&#xD;&#xA;&lt;p&gt;One way:&lt;/p&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mtcars) +&#xD;&#xA;  aes(y = mpg, x = hp) +&#xD;&#xA;  geom_point() +&#xD;&#xA;  geom_lm()&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;p&gt;&lt;img src=&#34;https://data-se.netlify.app/post/2018-12-13-visualizing-a-regression-plane-two-predictors_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;&#xD;&#xA;&lt;p&gt;Another way:&lt;/p&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mtcars) +&#xD;&#xA;  aes(x = hp) +&#xD;&#xA;  geom_point(aes(y = mpg)) +&#xD;&#xA;  geom_point(aes(y = lm1_pred), color = &amp;quot;blue&amp;quot;) +&#xD;&#xA;  geom_line(aes(y = lm1_pred), color = &amp;quot;blue&amp;quot;)&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;p&gt;&lt;img src=&#34;https://data-se.netlify.app/post/2018-12-13-visualizing-a-regression-plane-two-predictors_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Plot many ggplot diagrams using nest() and map()</title>
      <link>https://data-se.netlify.app/2018/12/05/plot-many-ggplot-diagrams-using-nest-and-map/</link>
      <pubDate>Wed, 05 Dec 2018 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2018/12/05/plot-many-ggplot-diagrams-using-nest-and-map/</guid>
      <description>&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;At times, it is helpful to plot a multiple of related diagrams, such as a scatter plot for each subgroup. As always, there a number of ways of doing so in R. Specifically, we will make use of &lt;code&gt;ggplot2&lt;/code&gt;.&lt;/p&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&#xD;&#xA;library(glue)&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data(mtcars)&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;d &amp;lt;- mtcars %&amp;gt;% &#xD;&#xA;  rownames_to_column(var = &amp;quot;car_names&amp;quot;)&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;p&gt;Is &lt;code&gt;d&lt;/code&gt; a tibble?&lt;/p&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;is_tibble(d)&#xD;&#xA;#&amp;gt; [1] FALSE&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;p&gt;What is it?&lt;/p&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;class(d)&#xD;&#xA;#&amp;gt; [1] &amp;quot;data.frame&amp;quot;&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;p&gt;Okay, let’s make a tibble out of it:&lt;/p&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;d &amp;lt;- as_tibble(d)&#xD;&#xA;class(d)&#xD;&#xA;#&amp;gt; [1] &amp;quot;tbl_df&amp;quot;     &amp;quot;tbl&amp;quot;        &amp;quot;data.frame&amp;quot;&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;div id=&#34;way-1-using-facets&#34; class=&#34;section level1&#34;&gt;&#xD;&#xA;&lt;h1&gt;Way 1: using facets&lt;/h1&gt;&#xD;&#xA;&lt;p&gt;One simple way is to plot several facets according to the grouping variable:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Simple Examples with DiagrammeR</title>
      <link>https://data-se.netlify.app/2018/11/07/simple-examples-with-diagrammer/</link>
      <pubDate>Wed, 07 Nov 2018 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2018/11/07/simple-examples-with-diagrammer/</guid>
      <description>&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/viz/viz.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;link href=&#34;https://data-se.netlify.app/rmarkdown-libs/DiagrammeR-styles/styles.css&#34; rel=&#34;stylesheet&#34; /&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/grViz-binding/grViz.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&lt;hr /&gt;&#xD;&#xA;&lt;p&gt;UPDATE 2018-12-13: Based on a comment from &lt;span class=&#34;citation&#34;&gt;@nmarkgraf&lt;/span&gt;, I added a section on how to export diagrammeR diagrams.&lt;/p&gt;&#xD;&#xA;&lt;hr /&gt;&#xD;&#xA;&lt;p&gt;Here are some examples of diagrams build with DiagrammeR:&lt;/p&gt;&#xD;&#xA;&lt;div id=&#34;setup&#34; class=&#34;section level1&#34;&gt;&#xD;&#xA;&lt;h1&gt;Setup&lt;/h1&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&#xD;&#xA;library(DiagrammeR)&#xD;&#xA;library(DiagrammeRsvg)&#xD;&#xA;library(magick)&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;div id=&#34;diagrammer-using-grviz&#34; class=&#34;section level1&#34;&gt;&#xD;&#xA;&lt;h1&gt;DiagrammeR using &lt;code&gt;grViz()&lt;/code&gt;&lt;/h1&gt;&#xD;&#xA;&lt;p&gt;Define the graph:&lt;/p&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;g1 &amp;lt;- &amp;quot;digraph boxes_and_circles {&#xD;&#xA;      graph [layout = circo,&#xD;&#xA;             overlap = true]&#xD;&#xA;      node [shape = circle,&#xD;&#xA;            fixedsize = true,&#xD;&#xA;            fontname = Helvetica,&#xD;&#xA;            width = 1]&#xD;&#xA;      Problem; Plan; Data; Analysis; Conclusion&#xD;&#xA;    &#xD;&#xA;      edge [color = grey]      &#xD;&#xA;      Problem -&amp;gt; Plan&#xD;&#xA;      Plan -&amp;gt; Data&#xD;&#xA;      Data -&amp;gt; Analysis&#xD;&#xA;      Analysis -&amp;gt; Conclusion&#xD;&#xA;      Conclusion -&amp;gt; Problem&#xD;&#xA;      }&amp;quot;&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;p&gt;Print it to the screen:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Plot columns repeatedly</title>
      <link>https://data-se.netlify.app/2018/11/02/plot-columns-repeatedly/</link>
      <pubDate>Fri, 02 Nov 2018 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2018/11/02/plot-columns-repeatedly/</guid>
      <description>&lt;p&gt;Suppose you have a large number of columns of a dataframe, and you want to plot each column – say a histogram for each column.&lt;/p&gt;&#xD;&#xA;&lt;p&gt;This post shows some ways of achieving this.&lt;/p&gt;&#xD;&#xA;&lt;p&gt;Let’s take the mtcars dataset as an example.&lt;/p&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data(mtcars)&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;p&gt;We will use the tidyverse approach:&lt;/p&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;div id=&#34;way-1&#34; class=&#34;section level1&#34;&gt;&#xD;&#xA;&lt;h1&gt;Way 1&lt;/h1&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mtcars %&amp;gt;% &#xD;&#xA;  select_if(is_numeric) %&amp;gt;% &#xD;&#xA;  map2(., names(.), ~ {ggplot(data = data_frame(.x), &#xD;&#xA;                              aes(x = .x)) + &#xD;&#xA;      geom_histogram() +&#xD;&#xA;      labs(x= .y)})&#xD;&#xA;#&amp;gt; $mpg&#xD;&#xA;#&amp;gt; &#xD;&#xA;#&amp;gt; $cyl&#xD;&#xA;#&amp;gt; &#xD;&#xA;#&amp;gt; $disp&#xD;&#xA;#&amp;gt; &#xD;&#xA;#&amp;gt; $hp&#xD;&#xA;#&amp;gt; &#xD;&#xA;#&amp;gt; $drat&#xD;&#xA;#&amp;gt; &#xD;&#xA;#&amp;gt; $wt&#xD;&#xA;#&amp;gt; &#xD;&#xA;#&amp;gt; $qsec&#xD;&#xA;#&amp;gt; &#xD;&#xA;#&amp;gt; $vs&#xD;&#xA;#&amp;gt; &#xD;&#xA;#&amp;gt; $am&#xD;&#xA;#&amp;gt; &#xD;&#xA;#&amp;gt; $gear&#xD;&#xA;#&amp;gt; &#xD;&#xA;#&amp;gt; $carb&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;p&gt;&lt;img src=&#34;https://data-se.netlify.app/post/2018-11-02-plot-columns-repeatedly_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;100%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;img src=&#34;https://data-se.netlify.app/post/2018-11-02-plot-columns-repeatedly_files/figure-html/unnamed-chunk-4-2.png&#34; width=&#34;100%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;img src=&#34;https://data-se.netlify.app/post/2018-11-02-plot-columns-repeatedly_files/figure-html/unnamed-chunk-4-3.png&#34; width=&#34;100%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;img src=&#34;https://data-se.netlify.app/post/2018-11-02-plot-columns-repeatedly_files/figure-html/unnamed-chunk-4-4.png&#34; width=&#34;100%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;img src=&#34;https://data-se.netlify.app/post/2018-11-02-plot-columns-repeatedly_files/figure-html/unnamed-chunk-4-5.png&#34; width=&#34;100%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;img src=&#34;https://data-se.netlify.app/post/2018-11-02-plot-columns-repeatedly_files/figure-html/unnamed-chunk-4-6.png&#34; width=&#34;100%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;img src=&#34;https://data-se.netlify.app/post/2018-11-02-plot-columns-repeatedly_files/figure-html/unnamed-chunk-4-7.png&#34; width=&#34;100%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;img src=&#34;https://data-se.netlify.app/post/2018-11-02-plot-columns-repeatedly_files/figure-html/unnamed-chunk-4-8.png&#34; width=&#34;100%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;img src=&#34;https://data-se.netlify.app/post/2018-11-02-plot-columns-repeatedly_files/figure-html/unnamed-chunk-4-9.png&#34; width=&#34;100%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;img src=&#34;https://data-se.netlify.app/post/2018-11-02-plot-columns-repeatedly_files/figure-html/unnamed-chunk-4-10.png&#34; width=&#34;100%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;img src=&#34;https://data-se.netlify.app/post/2018-11-02-plot-columns-repeatedly_files/figure-html/unnamed-chunk-4-11.png&#34; width=&#34;100%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Change standard theme of ggplot</title>
      <link>https://data-se.netlify.app/2018/10/10/change-standard-theme-of-ggplot/</link>
      <pubDate>Wed, 10 Oct 2018 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2018/10/10/change-standard-theme-of-ggplot/</guid>
      <description>&lt;p&gt;&lt;code&gt;ggplot2&lt;/code&gt; is customizeable. Frankly, one can change a heap of details - not everything probably, but a lot. Of course, one can add a theme to the ggplot call, in order to change the theme. However, a more catch-it-all approach would be to change the standard theme of ggplot itself. In this post, we’ll investigate this option.&lt;/p&gt;&#xD;&#xA;&lt;p&gt;Load some data and the right packages:&lt;/p&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data(mtcars)&#xD;&#xA;library(tidyverse)&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;p&gt;Here’s the standard theme of ggplot, let’s have a look at it&lt;/p&gt;</description>
    </item>
    <item>
      <title>Talk - Populism in tweets of German politicians (talk at DGPs 2018)</title>
      <link>https://data-se.netlify.app/2018/09/14/talk-populism-in-tweets-of-german-politicians-talk-at-dgps-2018/</link>
      <pubDate>Fri, 14 Sep 2018 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2018/09/14/talk-populism-in-tweets-of-german-politicians-talk-at-dgps-2018/</guid>
      <description>&lt;p&gt;The slides of my talk &lt;em&gt;Populism in tweets of German politicians&lt;/em&gt;&lt;/p&gt;&#xD;&#xA;&lt;p&gt;can be found here &lt;a href=&#34;http://data-se.netlify.com/slides/populist-twitter/populist-twitter-dgps2018.html#1&#34; class=&#34;uri&#34;&gt;http://data-se.netlify.com/slides/populist-twitter/populist-twitter-dgps2018.html#1&lt;/a&gt;.&lt;/p&gt;&#xD;&#xA;&lt;p&gt;Data, code, and more can be found at Github: &lt;a href=&#34;https://github.com/sebastiansauer/polits_tweet_mining&#34; class=&#34;uri&#34;&gt;https://github.com/sebastiansauer/polits_tweet_mining&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Wenn Excel aufgibt: Datenvisualisierung kann zu komplex für Excel werden</title>
      <link>https://data-se.netlify.app/2018/09/11/wenn-excel-aufgibt-datenvisualisierung-kann-zu-komplex-f%C3%BCr-excel-werden/</link>
      <pubDate>Tue, 11 Sep 2018 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2018/09/11/wenn-excel-aufgibt-datenvisualisierung-kann-zu-komplex-f%C3%BCr-excel-werden/</guid>
      <description>&lt;p&gt;Ms Excel ist ein beliebtes Werkzeug der Datenanalyse, auch für Datenvisualisierung. Es gibt einige Beispiele, dass andere Werkzeuge, wie R, zu ansehnlicheren Diagrammen führen können, s. &lt;a href=&#34;https://data-se.netlify.com/2017/11/20/great-dataviz-examples-in-rstats/&#34;&gt;diesen Post&lt;/a&gt;. In diesem Post geht es um eine verwandte Frage: Gibt es Diagramme, die nicht – oder nur sehr aufwendig – mit Excel zu erstellen sind?&lt;/p&gt;&#xD;&#xA;&lt;p&gt;&lt;del&gt;Die&lt;/del&gt; Meine Antwort lautet: Ja, die gibt es. Betrachten wir ein Beispiel.&lt;/p&gt;&#xD;&#xA;&lt;div id=&#34;bayesianische-modelle-visualisieren&#34; class=&#34;section level2&#34;&gt;&#xD;&#xA;&lt;h2&gt;Bayesianische Modelle visualisieren&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;Als Hintergrund dient uns &lt;a href=&#34;https://data-se.netlify.com/2018/08/25/bayesian-modeling-of-populist-party-success-in-german-federal-elections/&#34;&gt;eine Analyse&lt;/a&gt; (s. auch &lt;a href=&#34;http://data-se.netlify.com/slides/afd_dgps2018/afd_dgps2018.html&#34;&gt;diese Folien&lt;/a&gt;),&#xD;&#xA;die bayesianische Modell anwendet, um den AfD-Wahlerfolg bei der Bundestagswahl zu analysieren.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Plotting a logistic regression - some considerations</title>
      <link>https://data-se.netlify.app/2018/09/03/plotting-a-logistic-regression-some-considerations/</link>
      <pubDate>Mon, 03 Sep 2018 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2018/09/03/plotting-a-logistic-regression-some-considerations/</guid>
      <description>&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(mosaic)&#xD;&#xA;data(tips, package = &amp;quot;reshape2&amp;quot;)&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;p&gt;Recode &lt;code&gt;sex&lt;/code&gt;:&lt;/p&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tips %&amp;gt;% &#xD;&#xA;  mutate(sex_n = case_when(&#xD;&#xA;    sex == &amp;quot;Female&amp;quot; ~ 0,&#xD;&#xA;    sex == &amp;quot;Male&amp;quot; ~ 1&#xD;&#xA;  )) -&amp;gt; tips2&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;p&gt;Fit model:&lt;/p&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;glm1 &amp;lt;- glm(sex_n ~ total_bill, data = tips2,&#xD;&#xA;            family = &amp;quot;binomial&amp;quot;)&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;div id=&#34;way-1&#34; class=&#34;section level1&#34;&gt;&#xD;&#xA;&lt;h1&gt;Way 1&lt;/h1&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plotModel(glm1)&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;p&gt;&lt;img src=&#34;https://data-se.netlify.app/post/2018-09-03-plotting-a-logistic-regression-some-considerations_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;70%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;div id=&#34;way-2&#34; class=&#34;section level1&#34;&gt;&#xD;&#xA;&lt;h1&gt;Way 2&lt;/h1&gt;&#xD;&#xA;&lt;p&gt;Add predictions to data frame:&lt;/p&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tips2 %&amp;gt;% &#xD;&#xA;  mutate(pred = predict(glm1, newdata = tips, type = &amp;quot;response&amp;quot;)) %&amp;gt;% &#xD;&#xA;  mutate(predict_Male = pred &amp;gt; .5) -&amp;gt; tips3&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;p&gt;Check values of predictions:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bayesian modeling of populist party success in German federal elections - A notebook from the lab</title>
      <link>https://data-se.netlify.app/2018/08/25/bayesian-modeling-of-populist-party-success-in-german-federal-elections/</link>
      <pubDate>Sat, 25 Aug 2018 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2018/08/25/bayesian-modeling-of-populist-party-success-in-german-federal-elections/</guid>
      <description>&lt;p&gt;Following up on an &lt;a href=&#34;https://data-se.netlify.com/2017/10/10/afd-map/&#34;&gt;earlier post&lt;/a&gt;, we will model the voting success of the (most prominent) populist party, AfD, in the recent federal elections. This time, Bayesian modeling techniques will be used, drawing on the &lt;a href=&#34;https://xcelab.net/rm/statistical-rethinking/&#34;&gt;excellent textbook&lt;/a&gt; my McElreath.&lt;/p&gt;&#xD;&#xA;&lt;p&gt;Note that this post is rather a notebook of my thinking, doing, and erring. I’ve made no efforts to hide scaffolding. I think it will be confusing to the uniniate and the initiate as well …&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to prepare data for a gantt diagram</title>
      <link>https://data-se.netlify.app/2018/07/05/how-to-prepare-data-for-a-gantt-diagram/</link>
      <pubDate>Thu, 05 Jul 2018 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2018/07/05/how-to-prepare-data-for-a-gantt-diagram/</guid>
      <description>&lt;p&gt;There’s the new cool world of project management - agile, scrumbling, cool. There’s the old sluggish way of project management using stuff like &lt;em&gt;gantt&lt;/em&gt; diagrams. Let’s stick to the old world and come up with a gantt diagram.&lt;/p&gt;&#xD;&#xA;&lt;p&gt;The gant diagram itself is no big deal. Just some horizontal lines referring to dates. Somewhat more interesting is to populate a raw data frame in a way that allows for convenient plotting.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Visualizing mean values between two groups  - the tidyverse way</title>
      <link>https://data-se.netlify.app/2018/06/10/visualizing-summary-statistics-the-tidyverse-way/</link>
      <pubDate>Sun, 10 Jun 2018 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2018/06/10/visualizing-summary-statistics-the-tidyverse-way/</guid>
      <description>&lt;p&gt;A frequent job in data visualizing is to present summary statistics. In this post, I show one way to plot mean values between groups using the tidyverse approach in comparison to the mosaic way.&lt;/p&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&#xD;&#xA;data(mtcars)&#xD;&#xA;library(mosaic)&#xD;&#xA;library(knitr)&#xD;&#xA;library(sjmisc)&#xD;&#xA;library(sjPlot)&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;div id=&#34;visualizing-mean-values-between-two-groups&#34; class=&#34;section level1&#34;&gt;&#xD;&#xA;&lt;h1&gt;Visualizing mean values between two groups&lt;/h1&gt;&#xD;&#xA;&lt;p&gt;First, let’s compute the mean hp for automatic cars (&lt;code&gt;am == 0&lt;/code&gt;) vs. manual cars (&lt;code&gt;am == 1&lt;/code&gt;).&lt;/p&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mtcars %&amp;gt;% &#xD;&#xA;  group_by(am) %&amp;gt;% &#xD;&#xA;  summarise(hp_am = mean(hp)) -&amp;gt; hp_am&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;p&gt;Now just hand over this data frame of summarized data to ggplot:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Playing around with geo mapping: combining demographic data with spatial data</title>
      <link>https://data-se.netlify.app/2018/05/28/playing-around-with-geo-mapping-combining-demographic-data-with-spatial-data/</link>
      <pubDate>Mon, 28 May 2018 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2018/05/28/playing-around-with-geo-mapping-combining-demographic-data-with-spatial-data/</guid>
      <description>&lt;p&gt;In this post, we will play around with some basic geo mapping. More preciseyl, we will explore some easy ways to plot a choropleth map.&lt;/p&gt;&#xD;&#xA;&lt;p&gt;First, let’s load some geo data from &lt;a href=&#34;https://www.bundeswahlleiter.de/bundestagswahlen/2017/ergebnisse.html&#34;&gt;Bundeswahlleiter&lt;/a&gt;, and combine it with some socio demographic data from the same source.&lt;/p&gt;&#xD;&#xA;&lt;div id=&#34;preparation&#34; class=&#34;section level2&#34;&gt;&#xD;&#xA;&lt;h2&gt;Preparation&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;Let’s load some packages:&lt;/p&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;dplyr&amp;#39; was built under R version 3.5.1&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(sf)&#xD;&#xA;library(viridis)&#xD;&#xA;suppressPackageStartupMessages(library(googleVis))&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;p&gt;Geo data:&lt;/p&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;my_path_wahlkreise &amp;lt;- &amp;quot;~/Documents/datasets/geo_maps/btw17_geometrie_wahlkreise_shp/Geometrie_Wahlkreise_19DBT.shp&amp;quot;&#xD;&#xA;file.exists(my_path_wahlkreise)&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;pre&gt;&lt;code&gt;## [1] TRUE&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;p&gt;socio demographic data:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Playing around with dumbbell plots</title>
      <link>https://data-se.netlify.app/2018/05/23/playing-around-with-dumbbell-plots/</link>
      <pubDate>Wed, 23 May 2018 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2018/05/23/playing-around-with-dumbbell-plots/</guid>
      <description>&lt;p&gt;Dumbbell plots can be used to show differences between two groups. &lt;a href=&#34;https://rud.is/b/&#34;&gt;Bob Rudis&lt;/a&gt; demonstrated a beautiful application of such plots using ggplot2 board methods.&lt;/p&gt;&#xD;&#xA;&lt;p&gt;In this plot, I will explain or comment his code, and adapt a few changes.&lt;/p&gt;&#xD;&#xA;&lt;p&gt;First, load some packages.&lt;/p&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pacman::p_load(tidyverse, ggalt)&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;p&gt;Let’s make up some data. Tip: Make up some data conveniently in Excel, copy it to the clipboard, and then paste it as tribble (see below) into R. For the last step, there is this RStudio Add-in available “Dataset Loads”. Then use the menu item “Paste as Tribble”.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Playing around with dataviz: Comparing distributions between groups</title>
      <link>https://data-se.netlify.app/2018/05/18/playing-around-dataviz-comparing-distributions-between-groups/</link>
      <pubDate>Fri, 18 May 2018 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2018/05/18/playing-around-dataviz-comparing-distributions-between-groups/</guid>
      <description>&lt;p&gt;What’ a nice way to display distributional differences between a (larger) number of groups? Boxplots is one way to go. In addition, the raw data may be shown as dots, but should be demphasized. Third, a trend or big picture comparing the groups will make sense in some cases.&lt;/p&gt;&#xD;&#xA;&lt;p&gt;Ok, based on this reasoning, let’s do som visualizing. Let’s load some data (movies), and the usual culprits of packages.&lt;/p&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)  &#xD;&#xA;library(mosaic)&#xD;&#xA;&#xD;&#xA;data(movies, package = &amp;quot;ggplot2movies&amp;quot;)&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;p&gt;Now let’s add a variable for &lt;code&gt;decade&lt;/code&gt; as &lt;code&gt;year&lt;/code&gt; is too fine grained..&lt;/p&gt;</description>
    </item>
    <item>
      <title>Playing around with dataviz: Showing correlations</title>
      <link>https://data-se.netlify.app/2018/05/18/playing-around-with-dataviz-showing-correlations/</link>
      <pubDate>Fri, 18 May 2018 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2018/05/18/playing-around-with-dataviz-showing-correlations/</guid>
      <description>&lt;p&gt;In this plot, we are looking into some ways of displaying association between (two) quantitative variables, aka correlation. Our goal is to present a rich representation of the correlation.&lt;/p&gt;&#xD;&#xA;&lt;p&gt;Let’s take the dataset &lt;code&gt;flights&lt;/code&gt; as an example.&lt;/p&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data(flights, package = &amp;quot;nycflights13&amp;quot;)&#xD;&#xA;library(tidyverse)&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;dplyr&amp;#39; was built under R version 3.5.1&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(viridis)&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;flights %&amp;gt;% &#xD;&#xA;  filter(arr_delay &amp;lt; 100, dep_delay &amp;lt; 100) %&amp;gt;% &#xD;&#xA;  ggplot(aes(x = dep_delay, y = arr_delay, color = origin)) +&#xD;&#xA;  geom_point(alpha = .01) +&#xD;&#xA;  geom_smooth(se = FALSE, color = &amp;quot;grey20&amp;quot;) +&#xD;&#xA;  geom_rug() +&#xD;&#xA;  facet_wrap(~origin) +&#xD;&#xA;  scale_color_viridis_d()&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;pre&gt;&lt;code&gt;## `geom_smooth()` using method = &amp;#39;gam&amp;#39; and formula &amp;#39;y ~ s(x, bs = &amp;quot;cs&amp;quot;)&amp;#39;&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;p&gt;&lt;img src=&#34;https://data-se.netlify.app/post/2018-05-18-playing-around-with-dataviz-showing-correlations_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Showcase of Viridis, maps, and ggcounty</title>
      <link>https://data-se.netlify.app/2018/05/18/showcase-of-viridis-maps-and-ggounty/</link>
      <pubDate>Fri, 18 May 2018 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2018/05/18/showcase-of-viridis-maps-and-ggounty/</guid>
      <description>&lt;p&gt;This posts shows how easy it can be to build an visually pleasing plot. We will use &lt;a href=&#34;https://github.com/hrbrmstr&#34;&gt;hrbrmster&lt;/a&gt;’s &lt;code&gt;ggcounty&lt;/code&gt;, which is an R package at this &lt;a href=&#34;https://github.com/hrbrmstr/ggcounty&#34;&gt;Github repo&lt;/a&gt;. Graphics engine is as mostly in my plots, Hadley Wickhams &lt;code&gt;ggplot&lt;/code&gt;. All build on R. Standing on shoulders…&lt;/p&gt;&#xD;&#xA;&lt;p&gt;Disclaimer: This example heavily draws on hrbrmster example on &lt;a href=&#34;https://github.com/hrbrmstr/ggcounty&#34;&gt;this page&lt;/a&gt;. All credit is due to Rudy, and those on whose work he built up on.&lt;/p&gt;&#xD;&#xA;&lt;p&gt;First, load the relevant packages:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Visualisation of interaction for the logistic regression</title>
      <link>https://data-se.netlify.app/2018/04/02/visualisation-of-interaction-for-logistic-regression/</link>
      <pubDate>Mon, 02 Apr 2018 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2018/04/02/visualisation-of-interaction-for-logistic-regression/</guid>
      <description>&lt;p&gt;In this post we are plotting an interaction for a logistic regression. Interaction per se is a concept difficult to grasp; for a GLM it may be even more difficult especially for continuous variables’ interaction. Plotting helps to better or more easy grasp what a model tries to tell us.&lt;/p&gt;&#xD;&#xA;&lt;p&gt;First, load some packages.&lt;/p&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;pre&gt;&lt;code&gt;## ── Attaching packages ────────────────────────────────────────────────────────────────────────────────────────────────────────────────── tidyverse 1.2.1 ──&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;pre&gt;&lt;code&gt;## ✔ ggplot2 3.0.0     ✔ purrr   0.2.5&#xD;&#xA;## ✔ tibble  1.4.2     ✔ dplyr   0.7.6&#xD;&#xA;## ✔ tidyr   0.8.1     ✔ stringr 1.3.1&#xD;&#xA;## ✔ readr   1.1.1     ✔ forcats 0.3.0&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;dplyr&amp;#39; was built under R version 3.5.1&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;pre&gt;&lt;code&gt;## ── Conflicts ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────── tidyverse_conflicts() ──&#xD;&#xA;## ✖ dplyr::filter() masks stats::filter()&#xD;&#xA;## ✖ dplyr::lag()    masks stats::lag()&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(titanic)&#xD;&#xA;library(broom)&#xD;&#xA;library(modelr)&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;pre&gt;&lt;code&gt;## &#xD;&#xA;## Attaching package: &amp;#39;modelr&amp;#39;&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;pre&gt;&lt;code&gt;## The following object is masked from &amp;#39;package:broom&amp;#39;:&#xD;&#xA;## &#xD;&#xA;##     bootstrap&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(knitr)&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;p&gt;We will deal with the well-known Titanic data, ie., we check which predictors augment survival probability:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Intuition to Simpson&#39;s paradox</title>
      <link>https://data-se.netlify.app/2018/03/09/intuition-to-simpson-s-paradox/</link>
      <pubDate>Fri, 09 Mar 2018 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2018/03/09/intuition-to-simpson-s-paradox/</guid>
      <description>&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;Say, you have to choose between two doctors (Anna and Berta). To decide which one is better, you check their success rates. Suppose that they deal with two conditions (Coolities and Dummities). So let’s compare their success rate for each of the two conditions (and the total success rate):&lt;/p&gt;&#xD;&#xA;&lt;p&gt;This is the proportion of healing (success) of the first doctor, Dr. &lt;em&gt;Anna&lt;/em&gt; for each of the two conditions:&lt;/p&gt;&#xD;&#xA;&lt;ul&gt;&#xD;&#xA;&lt;li&gt;Coolities: 7 out of 8 patients are healed from Coolities&lt;/li&gt;&#xD;&#xA;&lt;li&gt;Dummieties: 1 out of 2 patients are healed from Dummities&lt;/li&gt;&#xD;&#xA;&lt;/ul&gt;&#xD;&#xA;&lt;p&gt;This is the proportion of healing (success) of the first doctor, Dr. &lt;em&gt;Berta&lt;/em&gt; for each of the two conditions:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Zusammenhang von Lernen und Noten im Statistikunterricht</title>
      <link>https://data-se.netlify.app/2017/12/20/zusammenhang-von-lernen-und-noten-im-statistikunterricht/</link>
      <pubDate>Wed, 20 Dec 2017 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2017/12/20/zusammenhang-von-lernen-und-noten-im-statistikunterricht/</guid>
      <description>&lt;p&gt;Führt Lernen zu besseren Noten? Eigene Erfahrung und allgemeiner Konsens stimmen dem zu; zumindest schadet Lernen des Stoffes nicht und hilft oft, gute Noten bei einer Prüfung zu diesem Stoff zu erzielen. Aber welche &lt;em&gt;Belege&lt;/em&gt;, &lt;em&gt;wissenschaftliche&lt;/em&gt; Belege gibt es dazu? An unserer Hochschule, die FOM, haben wir eine kleine Untersuchung zu dieser Frage durchgeführt. Genauer gesagt haben wir unseren Studierenden einen Statistik-Test vorlegt und gefagt, wie sehr sie sich für diesen Test vorbereitet hätten. Den Zusammenhang dieser beiden Größe haben wir dann ausgewertet; die folgende Abbildung zeigt das Ergebnis:&lt;/p&gt;</description>
    </item>
    <item>
      <title>A p-value picture</title>
      <link>https://data-se.netlify.app/2017/11/29/a-p-value-picture/</link>
      <pubDate>Wed, 29 Nov 2017 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2017/11/29/a-p-value-picture/</guid>
      <description>&lt;p&gt;Much ado and to say about the p-value. Let me add one more point; actually not really from myself, but from &lt;span class=&#34;citation&#34;&gt;Diez, Barr, and Cetinkaya-Rundel (&lt;a href=&#34;#ref-diez2012openintro&#34;&gt;2012&lt;/a&gt;)&lt;/span&gt;, p. 189; good book in one is looking for “orthodox” statistics.&lt;/p&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;pre&gt;&lt;code&gt;## ── Attaching packages ────────────────────────────────────────────────────────────────────────────────────────────────────────────────── tidyverse 1.2.1 ──&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;pre&gt;&lt;code&gt;## ✔ ggplot2 3.0.0     ✔ purrr   0.2.5&#xD;&#xA;## ✔ tibble  1.4.2     ✔ dplyr   0.7.6&#xD;&#xA;## ✔ tidyr   0.8.1     ✔ stringr 1.3.1&#xD;&#xA;## ✔ readr   1.1.1     ✔ forcats 0.3.0&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;dplyr&amp;#39; was built under R version 3.5.1&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;pre&gt;&lt;code&gt;## ── Conflicts ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────── tidyverse_conflicts() ──&#xD;&#xA;## ✖ dplyr::filter() masks stats::filter()&#xD;&#xA;## ✖ dplyr::lag()    masks stats::lag()&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(NULL, aes(c(-5,5))) +&#xD;&#xA;  geom_area(stat = &amp;quot;function&amp;quot;, fun = dnorm, fill = &amp;quot;grey40&amp;quot;, xlim = c(-5, 2)) +&#xD;&#xA;  geom_area(stat = &amp;quot;function&amp;quot;, fun = dnorm, fill = &amp;quot;#00998a&amp;quot;, xlim = c(2, 5)) +&#xD;&#xA;  labs(y = &amp;quot;&amp;quot;,&#xD;&#xA;       x = &amp;quot;X&amp;quot;) +&#xD;&#xA;  theme(axis.text = element_blank(),&#xD;&#xA;        axis.ticks = element_blank())&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;p&gt;&lt;img src=&#34;https://data-se.netlify.app/post/2017-11-29-a-p-value-picture_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Interactive diagrams in lieu of shiny?</title>
      <link>https://data-se.netlify.app/2017/11/27/interactive-diagrams-in-lieu-of-shiny/</link>
      <pubDate>Mon, 27 Nov 2017 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2017/11/27/interactive-diagrams-in-lieu-of-shiny/</guid>
      <description>&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/plotly-binding/plotly.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/typedarray/typedarray.min.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/jquery/jquery.min.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;link href=&#34;https://data-se.netlify.app/rmarkdown-libs/crosstalk/css/crosstalk.css&#34; rel=&#34;stylesheet&#34; /&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/crosstalk/js/crosstalk.min.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;link href=&#34;https://data-se.netlify.app/rmarkdown-libs/plotly-htmlwidgets-css/plotly-htmlwidgets.css&#34; rel=&#34;stylesheet&#34; /&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/plotly-main/plotly-latest.min.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;link href=&#34;https://data-se.netlify.app/rmarkdown-libs/bokehjs/bokeh.min.css&#34; rel=&#34;stylesheet&#34; /&gt;&#xD;&#xA;&lt;link href=&#34;https://data-se.netlify.app/rmarkdown-libs/bokehjs/loader.css&#34; rel=&#34;stylesheet&#34; /&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/bokehjs/bokeh.min.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/rbokeh-binding/rbokeh.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/d3v4/d3-4.13.0.min.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/d3v4/d3-legend.min.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;link href=&#34;https://data-se.netlify.app/rmarkdown-libs/d3.lasso-plugin/lasso.css&#34; rel=&#34;stylesheet&#34; /&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/d3.lasso-plugin/lasso.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;link href=&#34;https://data-se.netlify.app/rmarkdown-libs/scatterD3/scatterD3.css&#34; rel=&#34;stylesheet&#34; /&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/scatterD3/scatterD3-utils.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/scatterD3/scatterD3-setup.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/scatterD3/scatterD3-axes.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/scatterD3/scatterD3-dots.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/scatterD3/scatterD3-arrows.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/scatterD3/scatterD3-labels.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/scatterD3/scatterD3-lines.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/scatterD3/scatterD3-ellipses.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/scatterD3/scatterD3-legend.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/scatterD3/scatterD3-lasso.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/scatterD3/scatterD3-exports.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/scatterD3-binding/scatterD3.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/d3/d3.v3.min.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;link href=&#34;https://data-se.netlify.app/rmarkdown-libs/pairsD3/style.css&#34; rel=&#34;stylesheet&#34; /&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/pairsD3-binding/pairsD3.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/chart.js/./dist/Chart.min.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/chartJSRadar-binding/chartJSRadar.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;One frequent use of the Shiny server software is displaying interactive data diagrams. The pro of using&#xD;&#xA;Shiny is the great flexibility; much more than “just graphics” can be done. Basically Shiny provides a flexible&#xD;&#xA;GUI for your R program. &lt;em&gt;But&lt;/em&gt; if you simply aiming at displaying or exploring some data interactively, a much&#xD;&#xA;simplor approach may do it for you; there are some nice libraries available in R for that. The aim of this post is to present some examples, and to that’s easy to use them in R.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mapping foreigner ratio to AfD election results in the German Wahlkreise</title>
      <link>https://data-se.netlify.app/2017/10/22/afd-map-foreigners/</link>
      <pubDate>Sun, 22 Oct 2017 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2017/10/22/afd-map-foreigners/</guid>
      <description>&lt;p&gt;In a &lt;a href=&#34;https://data-se.netlify.com/2017/10/10/afd-map/&#34;&gt;previous post&lt;/a&gt;, we have shed some light on the idea that populism - as manifested in AfD election results - is associated with socioeconomic deprivation, be it subjective or objective. We found some supporting pattern in the data, although that hypothesis is far from being complete; ie., most of the variance remained unexplained.&lt;/p&gt;&#xA;&lt;p&gt;In this post, we test the hypothesis that AfD election results are &lt;em&gt;negatively&lt;/em&gt; associated with the proportion of foreign nationals in a Wahlkreis. The idea is this: Many foreigners in your neighborhood, and you will get used to it. You will perceive those type of people as normal. To the contrary, if there are few of them, they are perceived as rather alien.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mapping unemployment ratio to AfD election results in German Wahlkreise</title>
      <link>https://data-se.netlify.app/2017/10/10/afd-map/</link>
      <pubDate>Tue, 10 Oct 2017 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2017/10/10/afd-map/</guid>
      <description>&lt;p&gt;There is the idea that the alt-right German party AfD is followed by those who are deprived of chances, thoses of fearing to falling down the social ladder, and so on. Let&amp;rsquo;s test this hypothesis. No, I am not thinking on hypothesis testing, p-values, and stuff. Rather, let&amp;rsquo;s color a map of German election districts (Wahlkreise) according to whether the area is poor AND the AfD gained a lot of votes (and vice versa: the area is rich AND the AfD gained relatively few votes). More specifically, let&amp;rsquo;s look at unemployment ratios and incomes at different election areas in the country and compare those figures to AfD election results.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mapping unemployment rate to German district areas</title>
      <link>https://data-se.netlify.app/2017/10/09/unemp-map/</link>
      <pubDate>Mon, 09 Oct 2017 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2017/10/09/unemp-map/</guid>
      <description>&lt;p&gt;A &lt;em&gt;chloropleth&lt;/em&gt; map is a geographic map where statistical information are mapped to certain areas. Let&amp;rsquo;s plot such a chloropleth map in this post.&lt;/p&gt;&#xA;&lt;h1 id=&#34;packages&#34;&gt;Packages&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(sf)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(stringr)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(tidyverse)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(readxl)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;geo-data&#34;&gt;Geo data&lt;/h1&gt;&#xA;&lt;p&gt;Best place to get German geo data is from the &lt;a href=&#34;http://www.bkg.bund.de%3E&#34;&gt;&amp;ldquo;Bundesamt für Kartografie und Geodäsie (BKG)&amp;rdquo;&lt;/a&gt;. One may basically use the data for a purposes unless it is against the law. I have downloaded the data 2017-10-09. More specifically, we are looking at the &amp;ldquo;Verwaltungsgebiete&amp;rdquo; (vg), that is, the administrative areas of the country, ie., counties, states etc.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Drawing a country map</title>
      <link>https://data-se.netlify.app/2017/10/06/chloromap/</link>
      <pubDate>Fri, 06 Oct 2017 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2017/10/06/chloromap/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s draw a map of Bavaria, a state of Germany, in this post.&lt;/p&gt;&#xA;&lt;h1 id=&#34;packages&#34;&gt;Packages&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(tidyverse)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(maptools)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(sf)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(RColorBrewer)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(ggmap)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(viridis)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(stringr)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;data&#34;&gt;Data&lt;/h1&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s get the data first. Basically, we need to data files:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;the shape file, ie., a geographic details of state borders and points of interest&lt;/li&gt;&#xA;&lt;li&gt;the semantic information to points of interest eg., town names&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;shape-file&#34;&gt;Shape file&lt;/h2&gt;&#xA;&lt;p&gt;The shape file can be downloaded from this source: &lt;a href=&#34;http://www.metaspatial.net/download/plz.tar.gz&#34;&gt;http://www.metaspatial.net/download/plz.tar.gz&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://gadm.org/country&#34;&gt;This site&lt;/a&gt; also looks great to get geospatial data.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Different ways to present summaries in ggplot2</title>
      <link>https://data-se.netlify.app/2017/09/08/ggplot-summaries/</link>
      <pubDate>Fri, 08 Sep 2017 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2017/09/08/ggplot-summaries/</guid>
      <description>&lt;p&gt;A convenient and well applicable visualization for comparing groups with respect to a metric variable is the boxplot. However, often, comparing means is accompanied by t-tests, ANOVAs, and friends. Such tests test the &lt;em&gt;mean&lt;/em&gt;, not the median, and hence the boxplot is presenting the tested statistic. It would be better to align test and diagram. How can that be achieved using &lt;code&gt;ggplot2&lt;/code&gt;? This posts demonstrates some possibilities.&lt;/p&gt;&#xA;&lt;p&gt;First, let&amp;rsquo;s plot a boxplot.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Print csv-file tables as plots</title>
      <link>https://data-se.netlify.app/2017/06/22/tab2plot/</link>
      <pubDate>Thu, 22 Jun 2017 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2017/06/22/tab2plot/</guid>
      <description>&lt;h1 id=&#34;tldr&#34;&gt;tl;dr&lt;/h1&gt;&#xA;&lt;p&gt;Use this convenience function to print a dataframe as a png-plot: &lt;code&gt;tab2grob()&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Source the function here: &lt;a href=&#34;https://sebastiansauer.github.io/Rcode/tab2grob.R&#34;&gt;https://sebastiansauer.github.io/Rcode/tab2grob.R&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Easiest way in R:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;source(&amp;#34;https://sebastiansauer.github.io/Rcode/tab2grob.R&amp;#34;)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;printing-csv-dataframes-as-ggplot-plots&#34;&gt;Printing csv-dataframes as ggplot plots&lt;/h1&gt;&#xA;&lt;p&gt;Recently, I wanted to print dataframes not as normal tables, but as a png-plot. See:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://sebastiansauer.github.io/images/2017-06-22/Tabelle_Befehle_Datenjudo.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Why? Well, basically as a convenience function for colleagues who are not into using Markdown &amp;amp; friends. As I am preparing some stats stuff (see my new open access course material &lt;a href=&#34;https://sebastiansauer.github.io/Praxis_der_Datenanalyse/&#34;&gt;here&lt;/a&gt;) using RMarkdown, I wanted to prepare the materials ready for using in Powerpoint.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Sorting the x-axis in bargraphs using ggplot2</title>
      <link>https://data-se.netlify.app/2017/06/05/ordering-bars/</link>
      <pubDate>Mon, 05 Jun 2017 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2017/06/05/ordering-bars/</guid>
      <description>&lt;p&gt;Some time ago, I &lt;a href=&#34;https://sebastiansauer.github.io/percentage_plot_ggplot2_V2/&#34;&gt;posted about how to plot frequencies using ggplot2&lt;/a&gt;. One point that remained untouched was how to sort the order of the bars. Let&amp;rsquo;s look at that issue here.&lt;/p&gt;&#xA;&lt;p&gt;First, let&amp;rsquo;s load some data.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;(tips, package &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;reshape2&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And the usual culprits.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(tidyverse)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(scales)  &lt;span style=&#34;color:#75715e&#34;&gt;# for percentage scales&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;First, let&amp;rsquo;s plot a standard plot, with bars &lt;em&gt;un&lt;/em&gt;sorted.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tips &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt;(day) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;mutate&lt;/span&gt;(perc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nrow&lt;/span&gt;(tips)) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; tips2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;(tips2, &lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; day, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; perc)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_bar&lt;/span&gt;(stat &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;identity&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://sebastiansauer.github.io/images/2017-06-05/figure/unnamed-chunk-3-1.png&#34; alt=&#34;plot of chunk unnamed-chunk-3&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Simple way of plotting normal/logistic/etc. curve</title>
      <link>https://data-se.netlify.app/2017/05/24/plotting_s-curve/</link>
      <pubDate>Wed, 24 May 2017 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2017/05/24/plotting_s-curve/</guid>
      <description>&lt;p&gt;Plotting a function is often helpful to better understand what&amp;rsquo;s going on. Plotting curves in R &lt;code&gt;base&lt;/code&gt; is simple by virtue of function &lt;code&gt;curve&lt;/code&gt;. But how to draw curves using ggplot2?&lt;/p&gt;&#xA;&lt;p&gt;That&amp;rsquo;s a little bit more complicated by can still be accomplished by 1-2 lines.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(ggplot2)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;normal-curve&#34;&gt;Normal curve&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;(data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;data.frame&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;-3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)), &lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(x))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;stat_function&lt;/span&gt;(fun &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dnorm, n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt;) &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://sebastiansauer.github.io/images/2017-05-24/figure/unnamed-chunk-2-1.png&#34; alt=&#34;plot of chunk unnamed-chunk-2&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;stat_function&lt;/code&gt; is some kind of parallel function to &lt;code&gt;curve&lt;/code&gt;. The parameter &lt;code&gt;n&lt;/code&gt; tells ggplot how finely granulated the curve should be. Compare to &lt;code&gt;n=10&lt;/code&gt;:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Squares maximize area - a visualization</title>
      <link>https://data-se.netlify.app/2017/05/19/maximize_area/</link>
      <pubDate>Fri, 19 May 2017 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2017/05/19/maximize_area/</guid>
      <description>&lt;p&gt;An old story is that one of the farmer with a fence of some given length, say 20m. Now this farmer wants to put up his fence so that he claims the largest piece of land possible. What width (w) and height (h) should we pick?&lt;/p&gt;&#xA;&lt;p&gt;Instead of a formal proof, let&amp;rsquo;s start with a visualization.&lt;/p&gt;&#xA;&lt;p&gt;First, we need some packages.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(tidyverse)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(gganimate)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(RColorBrewer)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(scales)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(knitr)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, let&amp;rsquo;s make up serveral ways to split up a rectengular piece of land. Note that we only need to define two sides (width and height), as the circumference of a rectangle is $$c = 2w + sh$$.&lt;/p&gt;</description>
    </item>
    <item>
      <title>A predictor&#39;s unique contribution - (visual) demonstration</title>
      <link>https://data-se.netlify.app/2017/05/17/storks/</link>
      <pubDate>Wed, 17 May 2017 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2017/05/17/storks/</guid>
      <description>&lt;p&gt;A well-known property of regression models is that they capture the &lt;em&gt;unique&lt;/em&gt; contribution of a predictor. By &amp;ldquo;unique&amp;rdquo; we mean the effect of the predictor (on the criterion) &lt;em&gt;if the other predictor(s) is/are held constant&lt;/em&gt;. A typical classroom example goes along the following lines.&lt;/p&gt;&#xA;&lt;h1 id=&#34;all-about-storks&#34;&gt;All about storks&lt;/h1&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;There&amp;rsquo;s a correlation between babies and storks. Counties with lots of storks enjoy large number of babies and v.v.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;However, I have children, I know the storks are not overly involved in that business, so says the teacher (polite laughters in the audience).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Plotting true random numbers</title>
      <link>https://data-se.netlify.app/2017/05/12/true_random/</link>
      <pubDate>Fri, 12 May 2017 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2017/05/12/true_random/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;knitr&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;opts_chunk&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(fig.align &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;center&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                      out.width &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;70%&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                      fig.asp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;.61&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Every now and then, random numbers come in handy to demonstrate some statistical behavior. Of course, well-known appraoches are &lt;code&gt;rnorm&lt;/code&gt; and friends. These functions are what is called &lt;em&gt;pseudo random number generators&lt;/em&gt;, because they are not random at all, strictly speaking, but determined by some algorithm. An algorithm is a sort of creature that is 100% predictable once you know the input (and the details of the algorithm). Pseudo random numbers are useful &amp;lsquo;cause you know what you will get; reproducibility ensured.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Variance explained vs. variance blurred</title>
      <link>https://data-se.netlify.app/2017/05/05/explained_variance/</link>
      <pubDate>Fri, 05 May 2017 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2017/05/05/explained_variance/</guid>
      <description>&lt;p&gt;Frequently, someones says that some indicator variable X &amp;ldquo;explains&amp;rdquo; some proportion of some target variable, Y. What does this actually mean? By &amp;ldquo;mean&amp;rdquo; I am trying to find some intuition that &amp;ldquo;clicks&amp;rdquo; rather than citing the (well-known) formualas.&lt;/p&gt;&#xA;&lt;p&gt;To start with, let&amp;rsquo;s load some packages and make up some random data.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(tidyverse)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;n_rows &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;271828&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;df &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;data_frame&lt;/span&gt;(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  exp_clean &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rnorm&lt;/span&gt;(n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n_rows, mean &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, sd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cntrl_clean &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rnorm&lt;/span&gt;(n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n_rows, mean &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, sd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  exp_noisy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; exp_clean &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rnorm&lt;/span&gt;(n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n_rows, mean &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, sd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cntrl_noisy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cntrl_clean &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rnorm&lt;/span&gt;(n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n_rows, mean &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, sd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ID &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;n_rows)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here, we drew 100 cases from the population of the &amp;ldquo;experimental group&amp;rdquo; (mue = 2) and 100 cases from the control group (mue = 0). We will investigate the effect of noise on our data. So for both groups we make up noisy data: We just add some random noise on the existing data.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Plotting skewed distributions</title>
      <link>https://data-se.netlify.app/2017/04/19/skewed-distribs/</link>
      <pubDate>Wed, 19 Apr 2017 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2017/04/19/skewed-distribs/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s plot some skewed stuff, aehm, distributions!&lt;/p&gt;&#xA;&lt;p&gt;Actually, the point I - initially - wanted to make is that in skewed distribution, don&amp;rsquo;t use means. Or at least, be very aware that (arithmetic) means can be grossly misleading. But for today, let&amp;rsquo;s focus on drawing skewed distributions.&lt;/p&gt;&#xA;&lt;p&gt;Some packages:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(tidyverse)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(fGarch) &lt;span style=&#34;color:#75715e&#34;&gt;# for snorm&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Some skewed distribution include:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&amp;ldquo;polluted&amp;rdquo; normal distributions, ie., mixtures of two normals&lt;/li&gt;&#xA;&lt;li&gt;Exponential distributions&lt;/li&gt;&#xA;&lt;li&gt;Gamma distributions&lt;/li&gt;&#xA;&lt;li&gt;Beta distributions&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;One way to visualize them is to draw their curve, ie., their functional (analytical) form:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Error bars for interaction effects with nominal variables</title>
      <link>https://data-se.netlify.app/2017/04/18/moderator-errorbars/</link>
      <pubDate>Tue, 18 Apr 2017 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2017/04/18/moderator-errorbars/</guid>
      <description>&lt;p&gt;Moderator effects (ie., interaction or synergy effects) are a topic of frequent interest in many sciences braches. A lot ink has been spilled over this topic (so did I, eg., &lt;a href=&#34;https://sebastiansauer.github.io/vis_interaction_effects/&#34;&gt;here&lt;/a&gt;).&lt;/p&gt;&#xA;&lt;p&gt;However, in that post I did now show how to visualize error in case of nominal (categorical) independent variable, and categorical moderator.&lt;/p&gt;&#xA;&lt;p&gt;Luckily, visualization of this case is quite straight forward with ggplot2.&lt;/p&gt;&#xA;&lt;p&gt;First, some data and packages to be loaded:&lt;/p&gt;</description>
    </item>
    <item>
      <title>The two ggplot2-ways of plottings bars</title>
      <link>https://data-se.netlify.app/2017/01/20/two_ways_barplots_with_ggplot2/</link>
      <pubDate>Fri, 20 Jan 2017 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2017/01/20/two_ways_barplots_with_ggplot2/</guid>
      <description>&lt;p&gt;Bar plots, whereas not appropriate for means, are helpful for conveying impressions of frequencies, particularly relative frequencies, ie., proportions.&lt;/p&gt;&#xA;&lt;p&gt;Intuition: Bar plots and histograms alike can be thought of as piles of Lego pieces, put onto each each other, where each Lego piece represents (is) one observation.&lt;/p&gt;&#xA;&lt;p&gt;Presenting tables of frequencies are often not insightful to the eye. Bar plots are often much more accessible and present the story more clearly.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Visualizing Interaction Effects with ggplot2</title>
      <link>https://data-se.netlify.app/2017/01/17/vis_interaction_effects/</link>
      <pubDate>Tue, 17 Jan 2017 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2017/01/17/vis_interaction_effects/</guid>
      <description>&lt;p&gt;Moderator effects or interaction effect are a frequent topic of scientific endeavor. Put bluntly, such effects respond to the question whether the input variable X (predictor or independent variable IV) has an effect on the output variable (dependent variable DV) Y: &amp;ldquo;it depends&amp;rdquo;. More precisely, it depends on a second variable, M (Moderator).&lt;/p&gt;&#xA;&lt;p&gt;More formally, a moderation effect can be summarized as follows:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;If the effect of X on Y depends on M, a moderator effect takes place.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Some musings on the validation of Satow&#39;s Extraversion questionnaire</title>
      <link>https://data-se.netlify.app/2016/11/23/validation_extraversion_questionnaire/</link>
      <pubDate>Wed, 23 Nov 2016 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2016/11/23/validation_extraversion_questionnaire/</guid>
      <description>&lt;p&gt;Measuring personality traits is one of (the?) bread-and-butter business of psychologists, at least for quantitatively oriented ones. Literally, thousand of psychometric questionnaires exits. Measures abound. Extroversion, part of the Big Five personality &lt;del&gt;theory&lt;/del&gt; approach, is one of the most widely used, and extensively scrutinized questionnaire tapping into human personality.&lt;/p&gt;&#xA;&lt;p&gt;One rather new, but quite often used questionnaire, is &lt;a href=&#34;https://www.zpid.de/pub/tests/PT_9006357_B5T_Forschungsbericht.pdf&#34;&gt;Satow&amp;rsquo;s (2012)&lt;/a&gt; &lt;strong&gt;B5T&lt;/strong&gt;. The reason for the popularity of this instrument is that it runs under a CC-licence - in contrast to the old ducks, which coute chere. The B5T has undergone some psychometric scrutiny, and a number of results support the notion that it is a valid instrument.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Preparing survey results data</title>
      <link>https://data-se.netlify.app/2016/11/19/preparing_survey_data/</link>
      <pubDate>Sat, 19 Nov 2016 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2016/11/19/preparing_survey_data/</guid>
      <description>&lt;p&gt;Analyzing survey results is a frequent endeavor (for some including me). Let&amp;rsquo;s not think about arguments whether and when surveys are useful or not (for some recent criticism see &lt;a href=&#34;http://www.springer.com/de/book/9783319397559&#34;&gt;Briggs&amp;rsquo; book&lt;/a&gt;).&lt;/p&gt;&#xA;&lt;p&gt;Typically, respondents circle some option ranging from &amp;ldquo;don&amp;rsquo;t agree at all&amp;rdquo; to &amp;ldquo;completely agree&amp;rdquo; for each question (or &amp;ldquo;item&amp;rdquo;). Typically, four to six boxes are given where one is expected to tick one.&lt;/p&gt;&#xA;&lt;p&gt;In this tutorial, I will discuss some typical steps to prepare the data for subsequent analyses. The goal is that we have the dataset ready for analyzing with basic preparations (eg. recoding of reversed variables) already done.&lt;/p&gt;</description>
    </item>
    <item>
      <title>New bar stacking with ggplot 2.2.0</title>
      <link>https://data-se.netlify.app/2016/11/13/improved_bar_stacking_ggplot2_220/</link>
      <pubDate>Sun, 13 Nov 2016 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2016/11/13/improved_bar_stacking_ggplot2_220/</guid>
      <description>&lt;p&gt;Recently, &lt;code&gt;ggplot2&lt;/code&gt; 2.2.0 was released. Among other news, stacking bar plot was improved. Here is a short demonstration.&lt;/p&gt;&#xA;&lt;p&gt;Load libraries&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(tidyverse)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(htmlTable)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;hellip; and load data:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;data &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;read.csv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://osf.io/meyhp/?action=download&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;DOI for this piece of data is 10.17605/OSF.IO/4KGZH.&lt;/p&gt;&#xA;&lt;p&gt;The data consists of results of a survey on extraversion and associated behavior.&lt;/p&gt;&#xA;&lt;p&gt;Say, we would like to visualize the responsed to the extraversion items (there are 10 of them).&lt;/p&gt;&#xA;&lt;p&gt;So, let&amp;rsquo;s see. First, compute summary of the responses.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Plotting survey results using `ggplot2`</title>
      <link>https://data-se.netlify.app/2016/11/12/plotting_surveys/</link>
      <pubDate>Sat, 12 Nov 2016 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2016/11/12/plotting_surveys/</guid>
      <description>&lt;p&gt;Plotting (and more generally, analyzing) survey results is a frequent endeavor in many business environments. Let&amp;rsquo;s not think about arguments whether and when surveys are useful (for some recent criticism see &lt;a href=&#34;http://www.springer.com/de/book/9783319397559&#34;&gt;Briggs&amp;rsquo; book&lt;/a&gt;).&lt;/p&gt;&#xA;&lt;p&gt;Typically, respondents circle some option ranging from &amp;ldquo;don&amp;rsquo;t agree at all&amp;rdquo; to &amp;ldquo;completely agree&amp;rdquo; for each question (or &amp;ldquo;item&amp;rdquo;). Typically, four to six boxes are given where one is expected to tick one.&lt;/p&gt;&#xA;&lt;p&gt;In this tutorial, I will discuss some barplot type visualizations; the presentation is based on &lt;code&gt;ggplot2&lt;/code&gt; (within the &lt;code&gt;R&lt;/code&gt; environment) . Sure, much more can be done than will be presented here, but for the scope of this post, we will stick to the plain barplot (although some variations of it).&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to plot a &#39;percentage plot&#39; with ggplot2</title>
      <link>https://data-se.netlify.app/2016/11/03/percentage_plot_ggplot2_v2/</link>
      <pubDate>Thu, 03 Nov 2016 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2016/11/03/percentage_plot_ggplot2_v2/</guid>
      <description>&lt;p&gt;At times it is convenient to draw a frequency bar plot; at times we prefer not the bare frequencies but the proportions or the percentages per category. There are lots of ways doing so; let&amp;rsquo;s look at some &lt;code&gt;ggplot2&lt;/code&gt; ways.&lt;/p&gt;&#xA;&lt;p&gt;First, let&amp;rsquo;s load some data.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;(tips, package &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;reshape2&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And the typical libraries.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(dplyr)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(ggplot2)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(tidyr)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(scales)  &lt;span style=&#34;color:#75715e&#34;&gt;# for percentage scales&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;way-1&#34;&gt;Way 1&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tips &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt;(day) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;mutate&lt;/span&gt;(perc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nrow&lt;/span&gt;(tips)) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; tips2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;(tips2, &lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; day, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; perc)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_bar&lt;/span&gt;(stat &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;identity&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://sebastiansauer.github.io/images/2016-11-02-02/plot1-1.png&#34; alt=&#34;plot of chunk plot1&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>CLES plot</title>
      <link>https://data-se.netlify.app/2016/10/17/cles-plot/</link>
      <pubDate>Mon, 17 Oct 2016 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2016/10/17/cles-plot/</guid>
      <description>&lt;p&gt;In data analysis, we often ask &amp;ldquo;Do these two groups differ in the outcome variable&amp;rdquo;? Asking this question, a tacit assumption may be that the grouping variable is the cause of the difference in the outcome variable. For example, assume the two groups are &amp;ldquo;treatment group&amp;rdquo; and &amp;ldquo;control group&amp;rdquo;, and the outcome variable is &amp;ldquo;pain reduction&amp;rdquo;.&lt;/p&gt;&#xA;&lt;p&gt;A typical approach would be to report the strenght of the difference by help of Cohen&amp;rsquo;s d. Even better (probably, but this atttitude is not undebated) is to report confidence intervals for d.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Code example for plotting boxplots instead of mean bars</title>
      <link>https://data-se.netlify.app/2016/09/22/use-boxplots/</link>
      <pubDate>Thu, 22 Sep 2016 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2016/09/22/use-boxplots/</guid>
      <description>&lt;p&gt;On a recent psychology conference I had the impression that psychologists keep preferring to show mean values, but appear less interested in more detailled plots such as the boxplot. Plots like the boxplot are richer in information, but not more difficult to perceive.&lt;/p&gt;&#xA;&lt;p&gt;For those who would like to have an easy starter on how to visualize more informative plots (more than mean bars), here is a suggestion:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# install.pacakges(&amp;#34;Ecdat&amp;#34;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(Ecdat)  &lt;span style=&#34;color:#75715e&#34;&gt;# dataset on extramarital affairs&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;(Fair)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;str&lt;/span&gt;(Fair)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;## &amp;#39;data.frame&amp;#39;:&#x9;601 obs. of  9 variables:&#xD;&#xA;##  $ sex       : Factor w/ 2 levels &amp;#34;female&amp;#34;,&amp;#34;male&amp;#34;: 2 1 1 2 2 1 1 2 1 2 ...&#xD;&#xA;##  $ age       : num  37 27 32 57 22 32 22 57 32 22 ...&#xD;&#xA;##  $ ym        : num  10 4 15 15 0.75 1.5 0.75 15 15 1.5 ...&#xD;&#xA;##  $ child     : Factor w/ 2 levels &amp;#34;no&amp;#34;,&amp;#34;yes&amp;#34;: 1 1 2 2 1 1 1 2 2 1 ...&#xD;&#xA;##  $ religious : int  3 4 1 5 2 2 2 2 4 4 ...&#xD;&#xA;##  $ education : num  18 14 12 18 17 17 12 14 16 14 ...&#xD;&#xA;##  $ occupation: int  7 6 1 6 6 5 1 4 1 4 ...&#xD;&#xA;##  $ rate      : int  4 4 4 5 3 5 3 4 2 5 ...&#xD;&#xA;##  $ nbaffairs : num  0 0 0 0 0 0 0 0 0 0 ...&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(ggplot2)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(dplyr)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Fair &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;filter&lt;/span&gt;(nbaffairs &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sex, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nbaffairs)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;ggtitle&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Difference in extramarital affairs between sexes&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_boxplot&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_jitter&lt;/span&gt;(alpha &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;.5&lt;/span&gt;, color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;firebrick&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;theme_minimal&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://data-se.netlify.app/images/2016-09-22-01/unnamed-chunk-1-1.png&#34; alt=&#34;plot of chunk unnamed-chunk-1&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Plot of mean with exact numbers using ggplot2</title>
      <link>https://data-se.netlify.app/2016/08/30/plot_dot_means/</link>
      <pubDate>Tue, 30 Aug 2016 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2016/08/30/plot_dot_means/</guid>
      <description>&lt;p&gt;Often, both in academic research and more business-driven data analysis, we want to compare some (two in many cases) means. We will not discuss here that &lt;a href=&#34;https://www.kickstarter.com/projects/1474588473/barbarplots&#34;&gt;friends should not let friends plot barplots&lt;/a&gt;. Following the advise of &lt;a href=&#34;https://www.amazon.com/Visualizing-Data-William-S-Cleveland/dp/0963488406&#34;&gt;Cleveland&amp;rsquo;s seminal book&lt;/a&gt; we will plot the means using dots, not bars.&lt;/p&gt;&#xA;&lt;p&gt;However, at times we do not simply want the diagram, but we (or someone) is interested in the bare, plain, naked, exact numbers too. So we would like to put the numbers right into the diagram. One way to achieve this is the following:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Shading multiple areas under normal curve</title>
      <link>https://data-se.netlify.app/2016/08/30/shade_normal_curve/</link>
      <pubDate>Tue, 30 Aug 2016 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2016/08/30/shade_normal_curve/</guid>
      <description>&lt;p&gt;When plotting a normal curve, it is often helpful to color (or shade) some segments. For example, often we might want to indicate whether an absolute value is greater than 2.&lt;/p&gt;&#xA;&lt;p&gt;How can we achieve this with &lt;code&gt;ggplot2&lt;/code&gt;? Here is one way.&lt;/p&gt;&#xA;&lt;p&gt;First, load packages and define some constants. Specifically, we define mean, sd, and start/end (z-) value of the area we want to shade. And your favorite color is defined.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Simple way to plot a normal distribution with ggplot2</title>
      <link>https://data-se.netlify.app/2016/08/30/normal_curve_ggplot2/</link>
      <pubDate>Tue, 30 Aug 2016 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2016/08/30/normal_curve_ggplot2/</guid>
      <description>&lt;p&gt;Plotting a normal distribution is something needed in a variety of situation: Explaining to  students (or professors) the basic of statistics; convincing your clients that a t-Test is (not) the right approach to the problem, or pondering on the vicissitudes of life&amp;hellip;&lt;/p&gt;&#xA;&lt;p&gt;If you like &lt;code&gt;ggplot2&lt;/code&gt;, you may have wondered what the easiest way is to plot a normal curve with &lt;code&gt;ggplot2&lt;/code&gt;?&lt;/p&gt;&#xA;&lt;p&gt;Here is one:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(cowplot)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;## Loading required package: ggplot2&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;## &#xD;&#xA;## Attaching package: &amp;#39;cowplot&amp;#39;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;## The following object is masked from &amp;#39;package:ggplot2&amp;#39;:&#xD;&#xA;## &#xD;&#xA;##     ggsave&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;(data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;data.frame&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;-3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)), &lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(x)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;stat_function&lt;/span&gt;(fun &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dnorm, n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt;, args &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt;(mean &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, sd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ylab&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;scale_y_continuous&lt;/span&gt;(breaks &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://data-se.netlify.app/images/2016-08-30-01.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
