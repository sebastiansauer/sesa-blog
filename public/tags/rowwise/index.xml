<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rowwise on sesa blog</title>
    <link>https://data-se.netlify.app/tags/rowwise/</link>
    <description>Recent content in Rowwise on sesa blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 03 Jul 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://data-se.netlify.app/tags/rowwise/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Generalized rowwise operations using purrr::pmap</title>
      <link>https://data-se.netlify.app/2019/07/03/generalized-rowwise-operations-using-purrr-pmap/</link>
      <pubDate>Wed, 03 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2019/07/03/generalized-rowwise-operations-using-purrr-pmap/</guid>
      <description>&lt;div id=&#34;load-packages&#34; class=&#34;section level1&#34;&gt;&#xD;&#xA;&lt;h1&gt;Load packages&lt;/h1&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;p&gt;Rowwwise operations are a quite frequent operations in data analysis. The R language environment is particularly strong in &lt;em&gt;column&lt;/em&gt; wise operations. This is due to technical reasons, as data frames are internally built as column-by-column structures, hence column wise operations are simple, rowwise more difficult.&lt;/p&gt;&#xD;&#xA;&lt;p&gt;This post looks at some rather general way to comput rowwise statistics. Of course, numerous ways exist and there are quite a few tutorials around, notably by &lt;a href=&#34;https://github.com/jennybc/row-oriented-workflows&#34;&gt;Jenny Bryant&lt;/a&gt;, and by &lt;a href=&#34;https://www.hvitfeldt.me/blog/purrr-tips-and-tricks/&#34;&gt;Emil Hvitfeldt&lt;/a&gt; to name a few.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Testing for equality rowwise</title>
      <link>https://data-se.netlify.app/2019/07/03/testing-for-equality-rowwise/</link>
      <pubDate>Wed, 03 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2019/07/03/testing-for-equality-rowwise/</guid>
      <description>&lt;div id=&#34;load-packages&#34; class=&#34;section level1&#34;&gt;&#xD;&#xA;&lt;h1&gt;Load packages&lt;/h1&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;div id=&#34;basic-testing-for-equality&#34; class=&#34;section level1&#34;&gt;&#xD;&#xA;&lt;h1&gt;Basic testing for equality&lt;/h1&gt;&#xD;&#xA;&lt;p&gt;Testing for equality in a kind of very basic function in computer (and data) science. There is a straightforward function in R to test for equality:&lt;/p&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;identical(1, 1)&#xD;&#xA;#&amp;gt; [1] TRUE&#xD;&#xA;identical(&amp;quot;A&amp;quot;, &amp;quot;A&amp;quot;)&#xD;&#xA;#&amp;gt; [1] TRUE&#xD;&#xA;identical(1, 2)&#xD;&#xA;#&amp;gt; [1] FALSE&#xD;&#xA;identical(1, NA)&#xD;&#xA;#&amp;gt; [1] FALSE&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;p&gt;However this get more complicated if we want to compare more than two elements. One way to achieve this is to compute the number of the different items. If thereâ€™s only one different item, then all &lt;del&gt;maybe&lt;/del&gt; are the same. But, luckily we can at least say, if there are different numbers of different elements, the vectors are not the same.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
