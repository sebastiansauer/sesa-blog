<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dplyr on sesa blog</title>
    <link>https://data-se.netlify.app/tags/dplyr/</link>
    <description>Recent content in Dplyr on sesa blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 03 Jul 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://data-se.netlify.app/tags/dplyr/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Collapse rows to eliminate NAs</title>
      <link>https://data-se.netlify.app/2019/07/03/collapse-rows-to-eliminate-nas/</link>
      <pubDate>Wed, 03 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2019/07/03/collapse-rows-to-eliminate-nas/</guid>
      <description>&lt;div id=&#34;load-packages&#34; class=&#34;section level1&#34;&gt;&#xD;&#xA;&lt;h1&gt;Load packages&lt;/h1&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;div id=&#34;starters&#34; class=&#34;section level1&#34;&gt;&#xD;&#xA;&lt;h1&gt;Starters&lt;/h1&gt;&#xD;&#xA;&lt;p&gt;Assume you have this data frame:&lt;/p&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- tribble(&#xD;&#xA;  ~ colA, ~colB, ~colC,&#xD;&#xA;  NA, 1, NA,&#xD;&#xA;  1, NA, 1&#xD;&#xA;)&#xD;&#xA;&#xD;&#xA;x&#xD;&#xA;#&amp;gt; # A tibble: 2 x 3&#xD;&#xA;#&amp;gt;    colA  colB  colC&#xD;&#xA;#&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;&#xD;&#xA;#&amp;gt; 1    NA     1    NA&#xD;&#xA;#&amp;gt; 2     1    NA     1&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;p&gt;But you want this one:&lt;/p&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;y &amp;lt;- tribble(&#xD;&#xA;  ~ colA, ~colB, ~colC,&#xD;&#xA;  1, 1, 1&#xD;&#xA;)&#xD;&#xA;y&#xD;&#xA;#&amp;gt; # A tibble: 1 x 3&#xD;&#xA;#&amp;gt;    colA  colB  colC&#xD;&#xA;#&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;&#xD;&#xA;#&amp;gt; 1     1     1     1&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;p&gt;That is, you’d like to collapse rows so that if there’s a NA in a column it is replaced by the value found in some other line. We assume there’s only one value to be found, so no need to worry to decide which value to take.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming with dplyr: Part 03, working with strings</title>
      <link>https://data-se.netlify.app/2017/08/09/dplyr_strings/</link>
      <pubDate>Wed, 09 Aug 2017 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2017/08/09/dplyr_strings/</guid>
      <description>&lt;h1 id=&#34;more-on-programming-with-dplyr-converting-quosures-to-strings&#34;&gt;More on programming with dplyr: converting quosures to strings&lt;/h1&gt;&#xA;&lt;p&gt;In &lt;a href=&#34;https://sebastiansauer.github.io/prop_fav/&#34;&gt;this&lt;/a&gt; post, we have programmed a simple function using dplyr&amp;rsquo;s programming capabilities based on &lt;a href=&#34;https://cran.r-project.org/web/packages/rlang/vignettes/tidy-evaluation.html&#34;&gt;tidyeval&lt;/a&gt;; for more intro to programming with dplyr, see &lt;a href=&#34;https://cran.r-project.org/web/packages/dplyr/vignettes/programming.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;In this post, we&amp;rsquo;ll go one step further and programm a function where a quosure will be turned to a string. Why this? Because quite a number of functions out there except strings as input parameters.&lt;/p&gt;&#xA;&lt;h1 id=&#34;libraries&#34;&gt;Libraries&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(tidyverse)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(stringr)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;data-example&#34;&gt;Data example&lt;/h1&gt;&#xA;&lt;p&gt;Say, we have a string where we search for a word stem. However this stem does not appear in its &amp;ldquo;stem&amp;rdquo; form, but always with some suffixes. Let our stem be &amp;ldquo;spd&amp;rdquo; (the name of the German Social-Democratic party), and (for simplicity), we&amp;rsquo;ll assume two &amp;ldquo;instances&amp;rdquo; of &amp;ldquo;spd&amp;rdquo; that occurr &lt;em&gt;with&lt;/em&gt; suffix, ie., &amp;ldquo;spdbt&amp;rdquo; and &amp;ldquo;spdde&amp;rdquo;. (I was just working on a text mining on Tweets of German politiicians, hence the example).&lt;/p&gt;</description>
    </item>
    <item>
      <title>A second look to grouping with dplyr</title>
      <link>https://data-se.netlify.app/2017/06/28/second_look_group_by/</link>
      <pubDate>Wed, 28 Jun 2017 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2017/06/28/second_look_group_by/</guid>
      <description>&lt;p&gt;&lt;del&gt;The&lt;/del&gt; one basic idea of dplyr is that each function should focus on one job. That&amp;rsquo;s why there are no functions such as &lt;code&gt;compute_sumamries_by_group_with_robust_variants(df)&lt;/code&gt;. Rather, summarising and grouping are seen as different jobs which should be accomplished by different functions. And, in turn, that&amp;rsquo;s why &lt;code&gt;group_by&lt;/code&gt;, the grouping function of dplyr, is of considerable importance: this function should do the grouping for each operation whatsoever.&lt;/p&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s load all tidyverse libraries in one go:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming with dplyr: Part 01, introduction</title>
      <link>https://data-se.netlify.app/2017/06/28/prog_dplyr_01/</link>
      <pubDate>Wed, 28 Jun 2017 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2017/06/28/prog_dplyr_01/</guid>
      <description>&lt;p&gt;Like for [others], Hadley Wickham&amp;rsquo;s &lt;code&gt;dplyr&lt;/code&gt;, and more generally, the &lt;code&gt;tidyverse&lt;/code&gt; approach has considerably changed the I do data analyses. Most notably, the pipe (coming from &lt;code&gt;magrittr&lt;/code&gt; by Stefan Milton Bache, see &lt;a href=&#34;https://cran.r-project.org/web/packages/magrittr/vignettes/magrittr.html&#34;&gt;here&lt;/a&gt;) has creeped into nearly every analyses I, do.&lt;/p&gt;&#xA;&lt;p&gt;That is, is every analyses &lt;em&gt;except for&lt;/em&gt; functions, and other non-interactive stuff. In those programming contexts, the dplyr way does not work, due to its &lt;a href=&#34;http://adv-r.had.co.nz/Computing-on-the-language.html&#34;&gt;non standard evaluation&lt;/a&gt; or NSE for short.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Some tricks on dplyr::filter</title>
      <link>https://data-se.netlify.app/2016/12/21/dplyr_filter/</link>
      <pubDate>Wed, 21 Dec 2016 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2016/12/21/dplyr_filter/</guid>
      <description>&lt;p&gt;The R package &lt;code&gt;dplyr&lt;/code&gt; has some attractive features; some say, this packkage revolutionized their workflow. At any rate, I like it a lot, and I think it is very helpful.&lt;/p&gt;&#xA;&lt;p&gt;In this post, I would like to share some useful (I hope) ideas (&amp;ldquo;tricks&amp;rdquo;) on &lt;code&gt;filter&lt;/code&gt;, one function of &lt;code&gt;dplyr&lt;/code&gt;. This function does what the name suggests: it filters &lt;em&gt;rows&lt;/em&gt; (ie., observations such as persons). The addressed rows will be kept; the rest of the rows will be dropped. Note that always a &lt;del&gt;data frame&lt;/del&gt; tibble is returned.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Pipe the Variance</title>
      <link>https://data-se.netlify.app/2016/11/30/pipe_variance/</link>
      <pubDate>Wed, 30 Nov 2016 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2016/11/30/pipe_variance/</guid>
      <description>&lt;p&gt;One idea of problem solving is, or should be, I think, that one should tackle problems of high complexity, but not too high. That sounds trivial, cooler tone would be &amp;ldquo;as hard as possible, as easy as necessary&amp;rdquo; which is basically the same thing.&lt;/p&gt;&#xA;&lt;p&gt;In software development including Rstats, a similar principle applies. Sounds theoretical, I admit. So see here some lines of code that has bitten me recently:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;obs &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pred &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;monster &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;((obs &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; pred)^2))&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;((obs &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mean&lt;/span&gt;(obs))^2))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;monster&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;## [1] 0.5&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The important line is of course&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
