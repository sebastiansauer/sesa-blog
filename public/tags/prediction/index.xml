<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>prediction on sesa blog</title>
    <link>https://data-se.netlify.app/tags/prediction/</link>
    <description>Recent content in prediction on sesa blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 24 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://data-se.netlify.app/tags/prediction/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Minimal tidymodels example with the Lasso</title>
      <link>https://data-se.netlify.app/2022/07/24/minimal-tidymodels-example-with-the-lasso/</link>
      <pubDate>Sun, 24 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://data-se.netlify.app/2022/07/24/minimal-tidymodels-example-with-the-lasso/</guid>
      <description>1 Intro 2 Load packages 3 Data 4 Minimal code for fitting a model 5 Results 6 Reproducibility 1 Intro In this post, we try to find a minimal setup for running/fitting a predictive model using the tidymodels approach.
2 Load packages library(tidyverse) # data wrangling library(tidymodels) 3 Data data(&amp;quot;penguins&amp;quot;, package = &amp;quot;modeldata&amp;quot;) 4 Minimal code for fitting a model m1 &amp;lt;- linear_reg(engine = &amp;quot;glmnet&amp;quot;, penalty = 1, mixture = 1) %&amp;gt;% fit(body_mass_g ~ .</description>
    </item>
    
    <item>
      <title>Penguins Lasso with Tidymodels</title>
      <link>https://data-se.netlify.app/2022/07/24/penguins-lasso-with-tidymodels/</link>
      <pubDate>Sun, 24 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://data-se.netlify.app/2022/07/24/penguins-lasso-with-tidymodels/</guid>
      <description>1 Load packages 2 Data 3 A bit more than minimal 4 Results 5 Extract fit 6 Reproducibility 1 Load packages library(tidyverse) # data wrangling library(tidymodels) 2 Data data(&amp;quot;penguins&amp;quot;, package = &amp;quot;modeldata&amp;quot;) 3 A bit more than minimal rec1 &amp;lt;- recipe(body_mass_g ~ ., data = penguins) %&amp;gt;% step_dummy(all_nominal()) %&amp;gt;% step_normalize(all_numeric_predictors()) %&amp;gt;% step_nzv(all_numeric_predictors()) %&amp;gt;% step_naomit(all_predictors()) Checks:
summary(rec1) #&amp;gt; # A tibble: 7 √ó 4 #&amp;gt; variable type role source #&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; #&amp;gt; 1 species nominal predictor original #&amp;gt; 2 island nominal predictor original #&amp;gt; 3 bill_length_mm numeric predictor original #&amp;gt; 4 bill_depth_mm numeric predictor original #&amp;gt; 5 flipper_length_mm numeric predictor original #&amp;gt; 6 sex nominal predictor original #&amp;gt; 7 body_mass_g numeric outcome original tidy(rec1) #&amp;gt; # A tibble: 5 √ó 6 #&amp;gt; number operation type trained skip id #&amp;gt; &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;lgl&amp;gt; &amp;lt;lgl&amp;gt; &amp;lt;chr&amp;gt; #&amp;gt; 1 1 step dummy FALSE FALSE dummy_rc5a2 #&amp;gt; 2 2 step normalize FALSE FALSE normalize_U3yg4 #&amp;gt; 3 3 step nzv FALSE FALSE nzv_vruQ8 #&amp;gt; 4 4 step naomit FALSE TRUE naomit_PqP3J #&amp;gt; 5 5 step novel FALSE FALSE novel_6pjBL rec1 %&amp;gt;% prep() %&amp;gt;% bake(new_data = NULL) %&amp;gt;% head() #&amp;gt; # A tibble: 6 √ó 9 #&amp;gt; bill_length_mm bill_depth_mm flipper_length_mm body_mass_g species_Chinstrap #&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; #&amp;gt; 1 -0.</description>
    </item>
    
    <item>
      <title>Kurs: &#34;Vorhersage-Modellierung&#34;</title>
      <link>https://data-se.netlify.app/2022/01/28/kurs-vorhersage-modellierung/</link>
      <pubDate>Fri, 28 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://data-se.netlify.app/2022/01/28/kurs-vorhersage-modellierung/</guid>
      <description>Einf√ºhrung in die Vorhersage-Modellierung üîÆ Ein Kurs zur Grundlagen der Datenanalyse und der Vorhersage-Modellierung mit R.
Hier geht es zum Kurs.
Alle Materialien des Kurses sind frei verf√ºgbar, k√∂nnen kostenfrei genutzt werden und sind quelloffen.</description>
    </item>
    
    <item>
      <title>Vorhersage-Modellierung des Diamantenpreises</title>
      <link>https://data-se.netlify.app/2021/07/06/diamantenpreis-vorhersagen/</link>
      <pubDate>Tue, 06 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://data-se.netlify.app/2021/07/06/diamantenpreis-vorhersagen/</guid>
      <description>1 Vorbereitung 1.1 Forschungsfrage 1.2 Aufgabe 1.3 Pakete laden 1.4 Daten laden 1.5 ID-Spalte erg√§nzen 2 Vorwissen 3 Woran erkennt man einen ‚Äústarken Haupteffekt‚Äù? 4 Wichtige Pr√§diktoren 4.1 train2 4.2 test2 5 Feature Engineering 5.1 train3/test3 5.2 Korrelation 5.3 preds_important 6 Funktionale Form der Zusammenh√§nge 7 Filtern 7.1 train4 8 Transformationen 8.1 Log-Transformation (train5) 8.2 z-Transformation (train6) 9 Vorhersage-Modellierung 9.1 lm1 9.2 lm2 9.3 lm3 9.4 lm4 9.5 lm5 9.</description>
    </item>
    
    <item>
      <title>Vorhersage-Modellierung des Preises von Diamanten</title>
      <link>https://data-se.netlify.app/2021/05/19/vohrersgage-modellierung-des-preises-von-diamanten/</link>
      <pubDate>Wed, 19 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://data-se.netlify.app/2021/05/19/vohrersgage-modellierung-des-preises-von-diamanten/</guid>
      <description>1 Hintergrund und Ziel 2 Pakete laden 3 Daten laden 4 Aufteilen in Train- und Test-Datensatz 5 EDA 6 Modellierung 6.1 Modell 1 6.2 Modell 2 7 Vorhersage im Test-Datensatz 8 R-Quadrat im Test-Datensatz 9 Weitere √úberlegungen 10 Einreichen 1 Hintergrund und Ziel In diesem Post sagen wir den Preis von Diamanten vorher. Nehmen wir an, Sie h√§tten bei einem gro√üen Online-Kaufhaus angeheuert und ihre Chefin m√∂chte gerne wissen, welchen Preis sie wohl f√ºr bestimmte Diamanten erzielen kann.</description>
    </item>
    
    <item>
      <title>Fallstudie: Modellierung von Flugversp√§tungen</title>
      <link>https://data-se.netlify.app/2021/03/10/fallstudie-modellierung-von-flugversp%C3%A4tungen/</link>
      <pubDate>Wed, 10 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://data-se.netlify.app/2021/03/10/fallstudie-modellierung-von-flugversp%C3%A4tungen/</guid>
      <description>1 Hintergrund und Forschungsfrage 2 Pakete laden 3 Daten laden 4 flights2: Nicht ben√∂tigte Variablen entfernen und ID hinzuf√ºgen 5 Aufteilung in Train- und Testsample 6 flights_train2, flights_test2 7 lm0: Nullmodell 8 lm1: origin 9 lm2: All in 10 flights_train3: Textvariablen in Faktorvariablen umwandeln 10.1 flights_test3 11 flights_train4: Faktorstufen zusammenfassen 11.1 flights_test4 12 lm3: Alle zusammengefassten Faktorvariablen 13 lm4: Alle metrischen Variablen 14 lm5: Alle metrischen und alle (zusammengefassten) nominalen Variablen 15 Wetter-Daten erg√§nzen 15.</description>
    </item>
    
    <item>
      <title>Kaggle Notebook on the Titanic competition using tidymodels</title>
      <link>https://data-se.netlify.app/2020/12/12/kaggle-notebook-on-the-titanic-competition-using-tidymodels/</link>
      <pubDate>Sat, 12 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://data-se.netlify.app/2020/12/12/kaggle-notebook-on-the-titanic-competition-using-tidymodels/</guid>
      <description>Here is a Kaggle notebook on the Titanic prediction (ie., classifiactio) competition.</description>
    </item>
    
    <item>
      <title>Trying tidymodels: step_num2factor</title>
      <link>https://data-se.netlify.app/2020/12/12/trying-tidymodels-step-num2factor/</link>
      <pubDate>Sat, 12 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://data-se.netlify.app/2020/12/12/trying-tidymodels-step-num2factor/</guid>
      <description>1 Load packages 2 Understanding recipes and preprocessing 3 Load data 4 Define recipe 5 Prepare (prep()) the recipe 6 Reproducibility 1 Load packages library(tidyverse) # data wrangling library(tidymodels) # modelling 2 Understanding recipes and preprocessing Having defined a recipe in this Kaggle competition, I was left wondering about some details of the recipe definition. Let‚Äôs explore that.
3 Load data traindata_url &amp;lt;- &amp;quot;https://raw.githubusercontent.com/sebastiansauer/Statistiklehre/main/data/titanic/train.csv&amp;quot; train &amp;lt;- read_csv(traindata_url) 4 Define recipe titanic_recipe &amp;lt;- # define model formula: recipe(Survived ~ Pclass, data = train) %&amp;gt;% # convert numeric outcome to nominal (factor): step_num2factor(Survived, levels = c(&amp;quot;dead&amp;quot;, &amp;quot;alive&amp;quot;)) # not working, #todo 5 Prepare (prep()) the recipe { error = TRUE} titanic_recipe_prepped &amp;lt;- titanic_recipe %&amp;gt;% prep(verbose = TRUE)</description>
    </item>
    
    <item>
      <title>Simple Knime workflow for the Titanic Kaggle competition using a random forest model</title>
      <link>https://data-se.netlify.app/2020/12/05/simple-knime-workflow-for-the-titanic-kaggle-competation-using-a-random-forest-model/</link>
      <pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://data-se.netlify.app/2020/12/05/simple-knime-workflow-for-the-titanic-kaggle-competation-using-a-random-forest-model/</guid>
      <description>1 Kaggle Competition: Titanic Disaster 2 Simple Random Forest model 3 Enjoy! 4 Reproducibility 1 Kaggle Competition: Titanic Disaster The Titanic disaster Kaggle Competition is well-known, beginner friendly playground for predictive modelling.
2 Simple Random Forest model Here, I present a simple Random Forest model for predicting Survival:
The respective workflow can be found here.
3 Enjoy! 4 Reproducibility #&amp;gt; ‚îÄ Session info ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #&amp;gt; setting value #&amp;gt; version R version 4.</description>
    </item>
    
  </channel>
</rss>
