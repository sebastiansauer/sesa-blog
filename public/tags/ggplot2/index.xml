<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ggplot2 on sesa blog</title>
    <link>https://data-se.netlify.app/tags/ggplot2/</link>
    <description>Recent content in ggplot2 on sesa blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 25 Feb 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://data-se.netlify.app/tags/ggplot2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Adjust labels in ggplot</title>
      <link>https://data-se.netlify.app/2024/02/25/adjust-labels-in-ggplot/</link>
      <pubDate>Sun, 25 Feb 2024 00:00:00 +0000</pubDate>
      
      <guid>https://data-se.netlify.app/2024/02/25/adjust-labels-in-ggplot/</guid>
      <description>1 Load packages 2 Data 3 Unadjusted labels 4 Adjusted labels manually 5 Adjust labels automatically 6 Expanding the limits 7 Duckdive the problem: tinyfy the label 8 Reproducibility 1 Load packages library(tidyverse) # data wrangling library(see) # okabeito_colors 2 Data data(&amp;quot;mariokart&amp;quot;, package = &amp;quot;openintro&amp;quot;) 3 Unadjusted labels mario_quantile &amp;lt;- mariokart %&amp;gt;% filter(total_pr &amp;lt; 100) %&amp;gt;% summarise(q25 = quantile(total_pr, .25), q50 = quantile(total_pr, .50), q75 = quantile(total_pr, .75)) mario_quantile &amp;lt;- mariokart %&amp;gt;% filter(total_pr &amp;lt; 100) %&amp;gt;% reframe(qs = quantile(total_pr, c(.</description>
    </item>
    
    <item>
      <title>Using dynamic variables in ggplot2 for facetting and more</title>
      <link>https://data-se.netlify.app/2024/02/04/using-dynamic-variables-in-ggplot2-for-facetting-and-more/</link>
      <pubDate>Sun, 04 Feb 2024 00:00:00 +0000</pubDate>
      
      <guid>https://data-se.netlify.app/2024/02/04/using-dynamic-variables-in-ggplot2-for-facetting-and-more/</guid>
      <description> 1 Load packages 1 Load packages library(tidyverse) # data wrangling </description>
    </item>
    
    <item>
      <title>normal distribution animated</title>
      <link>https://data-se.netlify.app/2023/11/04/normal-distribution-animated/</link>
      <pubDate>Sat, 04 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://data-se.netlify.app/2023/11/04/normal-distribution-animated/</guid>
      <description>Background Let’s visualize the quantiles of a normal distribution.
Setup library(tidyverse) ## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ── ## ✔ dplyr 1.1.3 ✔ readr 2.1.4 ## ✔ forcats 1.0.0 ✔ stringr 1.5.0 ## ✔ ggplot2 3.4.4 ✔ tibble 3.2.1 ## ✔ lubridate 1.9.3 ✔ tidyr 1.3.0 ## ✔ purrr 1.0.2 ## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() ## ℹ Use the conflicted package (&amp;lt;http://conflicted.</description>
    </item>
    
    <item>
      <title>Farbpaletten für nominale Variablen</title>
      <link>https://data-se.netlify.app/2023/06/30/farbpaletten/</link>
      <pubDate>Fri, 30 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://data-se.netlify.app/2023/06/30/farbpaletten/</guid>
      <description>1 Setup 2 tl;dr 3 Beispiel für Farbwahl bei einer nominaler Variablen 4 Anforderungen an eine Farbpalette (für nominale Variablen) 5 Auswahl 6 Hilfsfunktion 7 AWTools 8 ggthemes 9 Weitere Paletten 10 rtist 11 ggsci 12 jcolors 13 Viridis 14 Magma 15 Color Lisa 16 Okabe-Ito 17 Tableau 10 18 Farbnamen 19 Show color 2 20 Farbenblindheit 20.1 Okabe Ito 20.2 Gene Davis 20.3 X18 20.4 Tableau 10 20.5 Viridis 21 Fazit 22 Reproducibility 1 Setup library(tidyverse) library(paletteer) library(scales) # show_col() library(colorblindr) # from github library(ggthemes) Das Paket paletteer trägt eine große Auswahl an Farbpaletten zusammen und erleichtert die Handhabung in R.</description>
    </item>
    
    <item>
      <title>Tables, plotted as ggplot objects</title>
      <link>https://data-se.netlify.app/2023/02/03/tables-plotted-as-ggplot-objects/</link>
      <pubDate>Fri, 03 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://data-se.netlify.app/2023/02/03/tables-plotted-as-ggplot-objects/</guid>
      <description>1 Load packages 2 Show case 1: grid.table 3 Show case 2: tableGrob 4 Show case 3: Reduce whitespace 5 Show case 4: ggpubr 6 Reproducibility 1 Load packages library(tidyverse) # data wrangling library(gridExtra) library(grid) library(gt) 2 Show case 1: grid.table d &amp;lt;- head(iris[,1:3]) grid.table(d) grid.table does the job nicely.
Just plotting give a somewhat too raw object:
plot(tableGrob(d)) 3 Show case 2: tableGrob The following R code is taken from this source:</description>
    </item>
    
    <item>
      <title>Programmatically plotting with ggplot2</title>
      <link>https://data-se.netlify.app/2022/09/28/programmatically-plotting-with-ggplot2/</link>
      <pubDate>Wed, 28 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://data-se.netlify.app/2022/09/28/programmatically-plotting-with-ggplot2/</guid>
      <description>1 Setup 2 Let’s go 2.1 Way 1 2.2 Way 2 2.3 Way 2 2.4 Way 3 2.5 Way 4 3 Further reading 4 Reproducibility 1 Setup library(tidyverse) # data wrangling library(easystats) # comfort in stats data(mtcars) In essence, we want to build this kind of plot programmatically:
mtcars %&amp;gt;% ggplot(aes(x=hp)) + geom_histogram() 2 Let’s go 2.1 Way 1 Let’s use unquoted variable names.
plot_descriptives0 &amp;lt;- function(data, var) { data %&amp;gt;% ggplot(aes(x = {{var}})) + geom_histogram() } plot_descriptives0(mtcars, hp) 2.</description>
    </item>
    
    <item>
      <title>Some ways to plot the distribution of each variable of a data frame</title>
      <link>https://data-se.netlify.app/2022/09/26/some-ways-to-plot-the-distribution-of-each-variable-of-a-data-frame/</link>
      <pubDate>Mon, 26 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://data-se.netlify.app/2022/09/26/some-ways-to-plot-the-distribution-of-each-variable-of-a-data-frame/</guid>
      <description>1 Motivation 2 Load packages 3 Load data 4 Let’s plot 4.1 Way 1 4.2 Way 2 4.3 Way 3 4.4 Way 4 5 Reproducibility 1 Motivation Often times, in explorative data analysis, one would like to plot the distribution of the relevant variables. Whereas ggplot provides handy tools to plot one variable after each other, it would come handy to plot ’em all in one go.
Of course, there are many ways to achieve this comfort.</description>
    </item>
    
    <item>
      <title>How to sort the labels of the legend in a ggplot-diagram</title>
      <link>https://data-se.netlify.app/2020/06/26/how-to-sort-the-labels-of-the-legend-in-a-ggplot-diagram/</link>
      <pubDate>Fri, 26 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://data-se.netlify.app/2020/06/26/how-to-sort-the-labels-of-the-legend-in-a-ggplot-diagram/</guid>
      <description>Load packages library(tidyverse) library(forcats) library(hrbrthemes) What we want to achieve: barplot ggplot2-diagram where bars and legend labels are sorted Say we would like to plot frequencies, and would like to use ggplot2 for that purpose. How can we get a decent graph? This post shows some ways.
Some data data(diamonds) A glimpse to the data glimpse(diamonds) #&amp;gt; Rows: 53,940 #&amp;gt; Columns: 10 #&amp;gt; $ carat &amp;lt;dbl&amp;gt; 0.23, 0.21, 0.23, 0.</description>
    </item>
    
    <item>
      <title>Ornaments with ggformula</title>
      <link>https://data-se.netlify.app/2019/02/12/ornaments-with-gformula/</link>
      <pubDate>Tue, 12 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://data-se.netlify.app/2019/02/12/ornaments-with-gformula/</guid>
      <description>Since some time, there’s a wrapper for ggplot2 available, bundled in the package ggformula. One nice thing is that in that it plays nicely with the popular R package mosaic. mosaic provides some useful functions for modeling along with a tamed and consistent syntax. In this post, we will discuss some “ornaments”, that is, some details of beautification of a plot. I confess that every one will deem it central, but in some cases in comes in handy to know how to “refine” a plot using ggformula.</description>
    </item>
    
    <item>
      <title>Changing the default color scheme in ggplot2</title>
      <link>https://data-se.netlify.app/2018/12/12/changing-the-default-color-scheme-in-ggplot2/</link>
      <pubDate>Wed, 12 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://data-se.netlify.app/2018/12/12/changing-the-default-color-scheme-in-ggplot2/</guid>
      <description>UPDATE: see update below based on comments from nmarkgraf.
UPDATE 2: I changed the theme to theme_minimal thanks to the comment from @neuwirthe.
UPDATE 3: A more efficient way to plot a discrete scale using viridis. Thanks to flying sheep; see way 4 below
The default color scheme in ggplot2 is suitable for many purposes, but, for instance, it is not suitable for b/w printing, and maybe not suitable for persons with limited color perception.</description>
    </item>
    
    <item>
      <title>Change standard theme of ggplot</title>
      <link>https://data-se.netlify.app/2018/10/10/change-standard-theme-of-ggplot/</link>
      <pubDate>Wed, 10 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://data-se.netlify.app/2018/10/10/change-standard-theme-of-ggplot/</guid>
      <description>ggplot2 is customizeable. Frankly, one can change a heap of details - not everything probably, but a lot. Of course, one can add a theme to the ggplot call, in order to change the theme. However, a more catch-it-all approach would be to change the standard theme of ggplot itself. In this post, we’ll investigate this option.
Load some data and the right packages:
data(mtcars) library(tidyverse) Here’s the standard theme of ggplot, let’s have a look at it</description>
    </item>
    
    <item>
      <title>Simple way of plotting normal/logistic/etc. curve</title>
      <link>https://data-se.netlify.app/2017/05/24/plotting_s-curve/</link>
      <pubDate>Wed, 24 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://data-se.netlify.app/2017/05/24/plotting_s-curve/</guid>
      <description>Plotting a function is often helpful to better understand what&amp;rsquo;s going on. Plotting curves in R base is simple by virtue of function curve. But how to draw curves using ggplot2?
That&amp;rsquo;s a little bit more complicated by can still be accomplished by 1-2 lines.
library(ggplot2) Normal curve p &amp;lt;- ggplot(data = data.frame(x = c(-3, 3)), aes(x)) p + stat_function(fun = dnorm, n = 101) stat_function is some kind of parallel function to curve.</description>
    </item>
    
  </channel>
</rss>
