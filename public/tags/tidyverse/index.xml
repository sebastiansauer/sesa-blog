<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tidyverse on sesa blog</title>
    <link>https://data-se.netlify.app/tags/tidyverse/</link>
    <description>Recent content in Tidyverse on sesa blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 30 Jan 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://data-se.netlify.app/tags/tidyverse/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Prevent dropping from non-occuring levels using dplyr</title>
      <link>https://data-se.netlify.app/2024/01/30/prevent-dropping-from-non-occuring-levels-using-dplyr/</link>
      <pubDate>Tue, 30 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2024/01/30/prevent-dropping-from-non-occuring-levels-using-dplyr/</guid>
      <description>&lt;div id=&#34;TOC&#34;&gt;&#xD;&#xA;&lt;ul&gt;&#xD;&#xA;&lt;li&gt;&lt;a href=&#34;#load-packages&#34; id=&#34;toc-load-packages&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1&lt;/span&gt; Load packages&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;&lt;li&gt;&lt;a href=&#34;#problem&#34; id=&#34;toc-problem&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2&lt;/span&gt; Problem&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;&lt;li&gt;&lt;a href=&#34;#solution&#34; id=&#34;toc-solution&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3&lt;/span&gt; Solution&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;&lt;li&gt;&lt;a href=&#34;#reproducibility&#34; id=&#34;toc-reproducibility&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4&lt;/span&gt; Reproducibility&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;&lt;/ul&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&#xD;&#xA;&lt;div id=&#34;load-packages&#34; class=&#34;section level1&#34; number=&#34;1&#34;&gt;&#xD;&#xA;&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; Load packages&lt;/h1&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)  # data wrangling&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;div id=&#34;problem&#34; class=&#34;section level1&#34; number=&#34;2&#34;&gt;&#xD;&#xA;&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;2&lt;/span&gt; Problem&lt;/h1&gt;&#xD;&#xA;&lt;p&gt;Consider the following situation:&lt;/p&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mtcars |&amp;gt; &#xD;&#xA;  group_by(high_hp = hp &amp;gt; 1000) |&amp;gt; &#xD;&#xA;  count(high_hp)&#xD;&#xA;#&amp;gt; # A tibble: 1 × 2&#xD;&#xA;#&amp;gt; # Groups:   high_hp [1]&#xD;&#xA;#&amp;gt;   high_hp     n&#xD;&#xA;#&amp;gt;   &amp;lt;lgl&amp;gt;   &amp;lt;int&amp;gt;&#xD;&#xA;#&amp;gt; 1 FALSE      32&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;p&gt;The summary table does not show the level &lt;code&gt;TRUE&lt;/code&gt;, as it is not occuring in the data.&#xD;&#xA;This can be problematic: If the data is unknown before summarizing and you would expect that both/all levels (TRUE, FALSE) occur. Just imagine that a subsequent function will count the level &lt;code&gt;TRUE&lt;/code&gt; and the level &lt;code&gt;FALSE&lt;/code&gt;. If one level is missing, your system may brake down.&lt;/p&gt;</description>
    </item>
    <item>
      <title>A quick demo how to compute rowwise means with the tidyverse</title>
      <link>https://data-se.netlify.app/2023/01/16/a-quick-demo-how-to-compute-rowwise-means-with-the-tidyverse/</link>
      <pubDate>Mon, 16 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2023/01/16/a-quick-demo-how-to-compute-rowwise-means-with-the-tidyverse/</guid>
      <description>&lt;div id=&#34;TOC&#34;&gt;&#xD;&#xA;&lt;ul&gt;&#xD;&#xA;&lt;li&gt;&lt;a href=&#34;#load-packages&#34; id=&#34;toc-load-packages&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1&lt;/span&gt; Load packages&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;&lt;li&gt;&lt;a href=&#34;#motivation&#34; id=&#34;toc-motivation&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2&lt;/span&gt; Motivation&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;&lt;li&gt;&lt;a href=&#34;#minimal-example&#34; id=&#34;toc-minimal-example&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3&lt;/span&gt; Minimal example&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;&lt;li&gt;&lt;a href=&#34;#see-also&#34; id=&#34;toc-see-also&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4&lt;/span&gt; See also&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;&lt;li&gt;&lt;a href=&#34;#reproducibility&#34; id=&#34;toc-reproducibility&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;5&lt;/span&gt; Reproducibility&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;&lt;/ul&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&#xD;&#xA;&lt;div id=&#34;load-packages&#34; class=&#34;section level1&#34; number=&#34;1&#34;&gt;&#xD;&#xA;&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; Load packages&lt;/h1&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)  # data wrangling&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;div id=&#34;motivation&#34; class=&#34;section level1&#34; number=&#34;2&#34;&gt;&#xD;&#xA;&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;2&lt;/span&gt; Motivation&lt;/h1&gt;&#xD;&#xA;&lt;p&gt;Sometimes is is neccessary to compute functions, such as mean values, rowwise, ie., summing the values for multiple variables (&lt;code&gt;my_vars&lt;/code&gt;) for each observation.&lt;/p&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;div id=&#34;minimal-example&#34; class=&#34;section level1&#34; number=&#34;3&#34;&gt;&#xD;&#xA;&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;3&lt;/span&gt; Minimal example&lt;/h1&gt;&#xD;&#xA;&lt;p&gt;For the sake of simplicity, we’ll make use of the &lt;code&gt;mtcars&lt;/code&gt; dataset.&lt;/p&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data(mtcars)&#xD;&#xA;&#xD;&#xA;my_vars &amp;lt;- c(&amp;quot;mpg&amp;quot;, &amp;quot;cyl&amp;quot;, &amp;quot;hp&amp;quot;)&#xD;&#xA;&#xD;&#xA;mtcars &amp;lt;-&#xD;&#xA;  mtcars |&amp;gt; &#xD;&#xA;  select(all_of(my_vars)) |&amp;gt; &#xD;&#xA;  rowwise() |&amp;gt; &#xD;&#xA;  mutate(mtcars_score = mean(c_across(all_of(my_vars)), na.rm = TRUE))&#xD;&#xA;&#xD;&#xA;head(mtcars)  # check&#xD;&#xA;#&amp;gt; # A tibble: 6 × 4&#xD;&#xA;#&amp;gt; # Rowwise: &#xD;&#xA;#&amp;gt;     mpg   cyl    hp mtcars_score&#xD;&#xA;#&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt;&#xD;&#xA;#&amp;gt; 1  21       6   110         45.7&#xD;&#xA;#&amp;gt; 2  21       6   110         45.7&#xD;&#xA;#&amp;gt; 3  22.8     4    93         39.9&#xD;&#xA;#&amp;gt; 4  21.4     6   110         45.8&#xD;&#xA;#&amp;gt; 5  18.7     8   175         67.2&#xD;&#xA;#&amp;gt; 6  18.1     6   105         43.0&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;p&gt;Check:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Setting to NA, conditionally</title>
      <link>https://data-se.netlify.app/2023/01/16/setting-to-na-conditionally/</link>
      <pubDate>Mon, 16 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2023/01/16/setting-to-na-conditionally/</guid>
      <description>&lt;div id=&#34;TOC&#34;&gt;&#xD;&#xA;&lt;ul&gt;&#xD;&#xA;&lt;li&gt;&lt;a href=&#34;#load-packages&#34; id=&#34;toc-load-packages&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1&lt;/span&gt; Load packages&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;&lt;li&gt;&lt;a href=&#34;#motivation&#34; id=&#34;toc-motivation&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2&lt;/span&gt; Motivation&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;&lt;li&gt;&lt;a href=&#34;#minimal-example&#34; id=&#34;toc-minimal-example&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3&lt;/span&gt; Minimal example&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;&lt;li&gt;&lt;a href=&#34;#reproducibility&#34; id=&#34;toc-reproducibility&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4&lt;/span&gt; Reproducibility&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;&lt;/ul&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&#xD;&#xA;&lt;div id=&#34;load-packages&#34; class=&#34;section level1&#34; number=&#34;1&#34;&gt;&#xD;&#xA;&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; Load packages&lt;/h1&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)  # data wrangling&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;div id=&#34;motivation&#34; class=&#34;section level1&#34; number=&#34;2&#34;&gt;&#xD;&#xA;&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;2&lt;/span&gt; Motivation&lt;/h1&gt;&#xD;&#xA;&lt;p&gt;Let’s assume we would like to change the values of multiple variables depending in the state of another variable.&#xD;&#xA;For the sake of concreteness, let’s say we have some variable called &lt;code&gt;data_trustworthiness&lt;/code&gt;. If this variable (indicating whether or not we can have confidence in some other variables) has the value &lt;code&gt;FALSE&lt;/code&gt; for some cases, we would like to set the varialbe &lt;code&gt;measure1&lt;/code&gt; and &lt;code&gt;measure2&lt;/code&gt; to &lt;code&gt;NA&lt;/code&gt;, thus reflecting that the data from our measurements are not reliable.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programmatically plotting with ggplot2</title>
      <link>https://data-se.netlify.app/2022/09/28/programmatically-plotting-with-ggplot2/</link>
      <pubDate>Wed, 28 Sep 2022 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2022/09/28/programmatically-plotting-with-ggplot2/</guid>
      <description>&lt;div id=&#34;TOC&#34;&gt;&#xD;&#xA;&lt;ul&gt;&#xD;&#xA;&lt;li&gt;&lt;a href=&#34;#setup&#34; id=&#34;toc-setup&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1&lt;/span&gt; Setup&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;&lt;li&gt;&lt;a href=&#34;#lets-go&#34; id=&#34;toc-lets-go&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2&lt;/span&gt; Let’s go&lt;/a&gt;&#xD;&#xA;&lt;ul&gt;&#xD;&#xA;&lt;li&gt;&lt;a href=&#34;#way-1&#34; id=&#34;toc-way-1&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.1&lt;/span&gt; Way 1&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;&lt;li&gt;&lt;a href=&#34;#way-2&#34; id=&#34;toc-way-2&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.2&lt;/span&gt; Way 2&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;&lt;li&gt;&lt;a href=&#34;#way-2-1&#34; id=&#34;toc-way-2-1&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.3&lt;/span&gt; Way 2&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;&lt;li&gt;&lt;a href=&#34;#way-3&#34; id=&#34;toc-way-3&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.4&lt;/span&gt; Way 3&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;&lt;li&gt;&lt;a href=&#34;#way-4&#34; id=&#34;toc-way-4&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.5&lt;/span&gt; Way 4&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xD;&#xA;&lt;li&gt;&lt;a href=&#34;#further-reading&#34; id=&#34;toc-further-reading&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3&lt;/span&gt; Further reading&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;&lt;li&gt;&lt;a href=&#34;#reproducibility&#34; id=&#34;toc-reproducibility&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4&lt;/span&gt; Reproducibility&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;&lt;/ul&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&#xD;&#xA;&lt;div id=&#34;setup&#34; class=&#34;section level1&#34; number=&#34;1&#34;&gt;&#xD;&#xA;&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; Setup&lt;/h1&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)  # data wrangling&#xD;&#xA;library(easystats)  # comfort in stats&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data(mtcars)&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;p&gt;In essence,&#xD;&#xA;we want to build this kind of plot programmatically:&lt;/p&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mtcars %&amp;gt;% &#xD;&#xA;  ggplot(aes(x=hp)) +&#xD;&#xA;  geom_histogram()&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;p&gt;&lt;img src=&#34;https://data-se.netlify.app/2022/09/28/programmatically-plotting-with-ggplot2/index_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;100%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;div id=&#34;lets-go&#34; class=&#34;section level1&#34; number=&#34;2&#34;&gt;&#xD;&#xA;&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;2&lt;/span&gt; Let’s go&lt;/h1&gt;&#xD;&#xA;&lt;div id=&#34;way-1&#34; class=&#34;section level2&#34; number=&#34;2.1&#34;&gt;&#xD;&#xA;&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.1&lt;/span&gt; Way 1&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;Let’s use unquoted variable names.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Some ways to plot the distribution of each variable of a data frame</title>
      <link>https://data-se.netlify.app/2022/09/26/some-ways-to-plot-the-distribution-of-each-variable-of-a-data-frame/</link>
      <pubDate>Mon, 26 Sep 2022 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2022/09/26/some-ways-to-plot-the-distribution-of-each-variable-of-a-data-frame/</guid>
      <description>&lt;div id=&#34;TOC&#34;&gt;&#xD;&#xA;&lt;ul&gt;&#xD;&#xA;&lt;li&gt;&lt;a href=&#34;#motivation&#34; id=&#34;toc-motivation&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1&lt;/span&gt; Motivation&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;&lt;li&gt;&lt;a href=&#34;#load-packages&#34; id=&#34;toc-load-packages&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2&lt;/span&gt; Load packages&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;&lt;li&gt;&lt;a href=&#34;#load-data&#34; id=&#34;toc-load-data&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3&lt;/span&gt; Load data&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;&lt;li&gt;&lt;a href=&#34;#lets-plot&#34; id=&#34;toc-lets-plot&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4&lt;/span&gt; Let’s plot&lt;/a&gt;&#xD;&#xA;&lt;ul&gt;&#xD;&#xA;&lt;li&gt;&lt;a href=&#34;#way-1&#34; id=&#34;toc-way-1&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4.1&lt;/span&gt; Way 1&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;&lt;li&gt;&lt;a href=&#34;#way-2&#34; id=&#34;toc-way-2&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4.2&lt;/span&gt; Way 2&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;&lt;li&gt;&lt;a href=&#34;#way-3&#34; id=&#34;toc-way-3&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4.3&lt;/span&gt; Way 3&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;&lt;li&gt;&lt;a href=&#34;#way-4&#34; id=&#34;toc-way-4&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4.4&lt;/span&gt; Way 4&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xD;&#xA;&lt;li&gt;&lt;a href=&#34;#reproducibility&#34; id=&#34;toc-reproducibility&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;5&lt;/span&gt; Reproducibility&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;&lt;/ul&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&#xD;&#xA;&lt;div id=&#34;motivation&#34; class=&#34;section level1&#34; number=&#34;1&#34;&gt;&#xD;&#xA;&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; Motivation&lt;/h1&gt;&#xD;&#xA;&lt;p&gt;Often times, in explorative data analysis, one would like to plot the distribution of the relevant variables.&#xD;&#xA;Whereas ggplot provides handy tools to plot &lt;em&gt;one&lt;/em&gt; variable after each other,&#xD;&#xA;it would come handy to plot ’em all in one go.&lt;/p&gt;&#xD;&#xA;&lt;p&gt;Of course, there are many ways to achieve this comfort. This posts presents some of them in brevity.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming the tidyverse: quoted and unqouted parameters</title>
      <link>https://data-se.netlify.app/2022/03/11/programming-the-tidyverse-quoted-and-unqouted-parameters/</link>
      <pubDate>Fri, 11 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2022/03/11/programming-the-tidyverse-quoted-and-unqouted-parameters/</guid>
      <description>&lt;script src=&#34;https://data-se.netlify.app/2022/03/11/programming-the-tidyverse-quoted-and-unqouted-parameters/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&#xD;&#xA;&lt;div id=&#34;TOC&#34;&gt;&#xD;&#xA;&lt;ul&gt;&#xD;&#xA;&lt;li&gt;&lt;a href=&#34;#load-packages&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1&lt;/span&gt; Load packages&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;&lt;li&gt;&lt;a href=&#34;#motivation&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2&lt;/span&gt; Motivation&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;&lt;li&gt;&lt;a href=&#34;#first-quoted-string-parameter&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3&lt;/span&gt; First: Quoted (string) parameter&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;&lt;li&gt;&lt;a href=&#34;#second-unquoted-parameter&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4&lt;/span&gt; Second: Unquoted parameter&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;&lt;li&gt;&lt;a href=&#34;#check&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;5&lt;/span&gt; Check&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;&lt;li&gt;&lt;a href=&#34;#bonus&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;6&lt;/span&gt; Bonus&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;&lt;/ul&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&#xD;&#xA;&lt;div id=&#34;load-packages&#34; class=&#34;section level1&#34; number=&#34;1&#34;&gt;&#xD;&#xA;&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; Load packages&lt;/h1&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)  # data wrangling&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;div id=&#34;motivation&#34; class=&#34;section level1&#34; number=&#34;2&#34;&gt;&#xD;&#xA;&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;2&lt;/span&gt; Motivation&lt;/h1&gt;&#xD;&#xA;&lt;p&gt;If a project reaches some level of complexity, sooner or later, more systematical meausures of coding need to be employed.&lt;/p&gt;&#xD;&#xA;&lt;p&gt;Using the tidyverse ecosystem, programming - instead of interactive use -&#xD;&#xA;may be something different or unusual and it may take some time to wrap your head around it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kurs: &#34;Vorhersage-Modellierung&#34;</title>
      <link>https://data-se.netlify.app/2022/01/28/kurs-vorhersage-modellierung/</link>
      <pubDate>Fri, 28 Jan 2022 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2022/01/28/kurs-vorhersage-modellierung/</guid>
      <description>&lt;script src=&#34;https://data-se.netlify.app/2022/01/28/kurs-vorhersage-modellierung/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&lt;div id=&#34;einführung-in-die-vorhersage-modellierung&#34; class=&#34;section level1&#34;&gt;&#xD;&#xA;&lt;h1&gt;Einführung in die Vorhersage-Modellierung 🔮&lt;/h1&gt;&#xD;&#xA;&lt;p&gt;Ein Kurs zur Grundlagen der Datenanalyse und der Vorhersage-Modellierung mit R.&lt;/p&gt;&#xD;&#xA;&lt;p&gt;&lt;a href=&#34;https://sebastiansauer.github.io/vorhersagemodellierung/index.html&#34;&gt;Hier&lt;/a&gt; geht es zum Kurs.&lt;/p&gt;&#xD;&#xA;&lt;p&gt;Alle Materialien des Kurses sind frei verfügbar, können kostenfrei genutzt werden und sind quelloffen.&lt;/p&gt;&#xD;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Computing rater accuracy across multiple raters and multiple criteria</title>
      <link>https://data-se.netlify.app/2019/08/27/computing-rater-accuracy-across-multiple-raters-and-multiple-criteria/</link>
      <pubDate>Tue, 27 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2019/08/27/computing-rater-accuracy-across-multiple-raters-and-multiple-criteria/</guid>
      <description>&lt;div id=&#34;load-packages&#34; class=&#34;section level1&#34;&gt;&#xD;&#xA;&lt;h1&gt;Load packages&lt;/h1&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;div id=&#34;background&#34; class=&#34;section level1&#34;&gt;&#xD;&#xA;&lt;h1&gt;Background&lt;/h1&gt;&#xD;&#xA;&lt;p&gt;Computing inter-rater reliability is a well-known, albeit maybe not very frequent task in data analysis. If there’s only one criteria and two raters, the proceeding is straigt forward; Cohen’s Kappa is the most widely used coefficient for that purpose. It is more challenging to compare multiple raters on one criterion; Fleiss’ Kappa is one way to get a coefficient. If there are multiple criteria, one way is to compute the mean of multiple Fleiss’ coefficients.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to mutate all columns of a data frame</title>
      <link>https://data-se.netlify.app/2019/03/13/how-to-mutate-all-columns-of-a-data-frame/</link>
      <pubDate>Wed, 13 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2019/03/13/how-to-mutate-all-columns-of-a-data-frame/</guid>
      <description>&lt;p&gt;Say, you have a data frame with a number of columns, and you need to change every column in a similar way. A common example might be to standardize all (numeric) variables. How to do that in R? This post shows and explains an example using &lt;code&gt;mutate_all()&lt;/code&gt; from the tidyverse.&lt;/p&gt;&#xD;&#xA;&lt;p&gt;Let’s stick to the question “how to z-standardize all columns” for the sake of simplicity (and neglect that there are precooked solutions, for example from the superb package &lt;code&gt;sjmisc&lt;/code&gt; by strengejacke.)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ornaments with ggformula</title>
      <link>https://data-se.netlify.app/2019/02/12/ornaments-with-gformula/</link>
      <pubDate>Tue, 12 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2019/02/12/ornaments-with-gformula/</guid>
      <description>&lt;p&gt;Since some time, there’s a wrapper for &lt;code&gt;ggplot2&lt;/code&gt; available, bundled in the package &lt;code&gt;ggformula&lt;/code&gt;. One nice thing is that in that it plays nicely with the popular R package &lt;code&gt;mosaic&lt;/code&gt;. &lt;code&gt;mosaic&lt;/code&gt; provides some useful functions for modeling along with a tamed and consistent syntax. In this post, we will discuss some “ornaments”, that is, some details of beautification of a plot. I confess that every one will deem it central, but in some cases in comes in handy to know how to “refine” a plot using &lt;code&gt;ggformula&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>An illustration of tidyverse’ gather/spread</title>
      <link>https://data-se.netlify.app/2019/01/15/an-illustration-of-tidyverse-gather-spread/</link>
      <pubDate>Tue, 15 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2019/01/15/an-illustration-of-tidyverse-gather-spread/</guid>
      <description>&lt;p&gt;Frequently, datasets have to be reshaped before further analysis. One particular important step is to transform a data frame from “wide” to “long” format. This is illustrated by the following diagram, taken from by &lt;a href=&#34;https://www.springer.com/us/book/9783658215866&#34;&gt;new book on data analysis&lt;/a&gt; (Image licence: CC-BY-NC).&lt;/p&gt;&#xD;&#xA;&lt;p&gt;&lt;img src=&#34;https://data-se.netlify.app/img/gatherspread.png&#34; width=&#34;100%&#34; /&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Changing the default color scheme in ggplot2</title>
      <link>https://data-se.netlify.app/2018/12/12/changing-the-default-color-scheme-in-ggplot2/</link>
      <pubDate>Wed, 12 Dec 2018 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2018/12/12/changing-the-default-color-scheme-in-ggplot2/</guid>
      <description>&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&lt;hr /&gt;&#xD;&#xA;&lt;p&gt;UPDATE: see update below based on comments from &lt;a href=&#34;https://disqus.com/by/nmarkgraf/?utm_source=reply&amp;amp;utm_medium=email&amp;amp;utm_content=comment_author&#34;&gt;nmarkgraf&lt;/a&gt;.&lt;/p&gt;&#xD;&#xA;&lt;hr /&gt;&#xD;&#xA;&lt;hr /&gt;&#xD;&#xA;&lt;p&gt;UPDATE 2: I changed the theme to &lt;code&gt;theme_minimal&lt;/code&gt; thanks to the comment from &lt;span class=&#34;citation&#34;&gt;@neuwirthe&lt;/span&gt;.&lt;/p&gt;&#xD;&#xA;&lt;hr /&gt;&#xD;&#xA;&lt;hr /&gt;&#xD;&#xA;&lt;p&gt;UPDATE 3: A more efficient way to plot a discrete scale using viridis. Thanks to &lt;a href=&#34;https://stackoverflow.com/users/247482/flying-sheep&#34;&gt;flying sheep&lt;/a&gt;; see way 4 below&lt;/p&gt;&#xD;&#xA;&lt;hr /&gt;&#xD;&#xA;&lt;p&gt;The default color scheme in ggplot2 is suitable for many purposes, but, for instance, it is not suitable for b/w printing, and maybe not suitable for persons with limited color perception.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Applying a function to each row of a data frame</title>
      <link>https://data-se.netlify.app/2018/12/07/applying-a-function-to-each-row-of-a-data-frame/</link>
      <pubDate>Fri, 07 Dec 2018 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2018/12/07/applying-a-function-to-each-row-of-a-data-frame/</guid>
      <description>&lt;p&gt;A typical and quite straight forward operation in R and the tidyverse is to apply a function on each column of a data frame (or on each element of a list, which is the same for that regard).&lt;/p&gt;&#xD;&#xA;&lt;p&gt;However, the orthogonal question of “how to apply a function on each &lt;em&gt;row&lt;/em&gt;” is much less labored. We will look at this question in this post, and explore some (of many) answers to this question.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Plot many ggplot diagrams using nest() and map()</title>
      <link>https://data-se.netlify.app/2018/12/05/plot-many-ggplot-diagrams-using-nest-and-map/</link>
      <pubDate>Wed, 05 Dec 2018 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2018/12/05/plot-many-ggplot-diagrams-using-nest-and-map/</guid>
      <description>&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;At times, it is helpful to plot a multiple of related diagrams, such as a scatter plot for each subgroup. As always, there a number of ways of doing so in R. Specifically, we will make use of &lt;code&gt;ggplot2&lt;/code&gt;.&lt;/p&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&#xD;&#xA;library(glue)&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data(mtcars)&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;d &amp;lt;- mtcars %&amp;gt;% &#xD;&#xA;  rownames_to_column(var = &amp;quot;car_names&amp;quot;)&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;p&gt;Is &lt;code&gt;d&lt;/code&gt; a tibble?&lt;/p&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;is_tibble(d)&#xD;&#xA;#&amp;gt; [1] FALSE&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;p&gt;What is it?&lt;/p&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;class(d)&#xD;&#xA;#&amp;gt; [1] &amp;quot;data.frame&amp;quot;&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;p&gt;Okay, let’s make a tibble out of it:&lt;/p&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;d &amp;lt;- as_tibble(d)&#xD;&#xA;class(d)&#xD;&#xA;#&amp;gt; [1] &amp;quot;tbl_df&amp;quot;     &amp;quot;tbl&amp;quot;        &amp;quot;data.frame&amp;quot;&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;div id=&#34;way-1-using-facets&#34; class=&#34;section level1&#34;&gt;&#xD;&#xA;&lt;h1&gt;Way 1: using facets&lt;/h1&gt;&#xD;&#xA;&lt;p&gt;One simple way is to plot several facets according to the grouping variable:&lt;/p&gt;</description>
    </item>
    <item>
      <title>What are the names of the cars with 4 cylinders?</title>
      <link>https://data-se.netlify.app/2018/12/03/what-are-the-names-of-the-cars-with-4-cylinders/</link>
      <pubDate>Mon, 03 Dec 2018 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2018/12/03/what-are-the-names-of-the-cars-with-4-cylinders/</guid>
      <description>&lt;p&gt;Recently, some one asked me in a workshop this question: “What are the names of the cars with 4 (6,8) cylinders?” (he referred to the &lt;code&gt;mtcars&lt;/code&gt; data set). That was a workshop on the tidyverse, so the question is how to answer this question using tidyverse techniques.&lt;/p&gt;&#xD;&#xA;&lt;p&gt;First, let’s load the usual culprits.&lt;/p&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&#xD;&#xA;library(purrrlyr)&#xD;&#xA;library(knitr)&#xD;&#xA;library(stringr)&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data(mtcars)&#xD;&#xA;&#xD;&#xA;d &amp;lt;- as_tibble(mtcars) %&amp;gt;% &#xD;&#xA;  rownames_to_column(var = &amp;quot;car_names&amp;quot;)&#xD;&#xA;&#xD;&#xA;d %&amp;gt;% &#xD;&#xA;  head() %&amp;gt;% &#xD;&#xA;  kable()&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;table&gt;&#xD;&#xA;&lt;thead&gt;&#xD;&#xA;&lt;tr class=&#34;header&#34;&gt;&#xD;&#xA;&lt;th align=&#34;left&#34;&gt;car_names&lt;/th&gt;&#xD;&#xA;&lt;th align=&#34;right&#34;&gt;mpg&lt;/th&gt;&#xD;&#xA;&lt;th align=&#34;right&#34;&gt;cyl&lt;/th&gt;&#xD;&#xA;&lt;th align=&#34;right&#34;&gt;disp&lt;/th&gt;&#xD;&#xA;&lt;th align=&#34;right&#34;&gt;hp&lt;/th&gt;&#xD;&#xA;&lt;th align=&#34;right&#34;&gt;drat&lt;/th&gt;&#xD;&#xA;&lt;th align=&#34;right&#34;&gt;wt&lt;/th&gt;&#xD;&#xA;&lt;th align=&#34;right&#34;&gt;qsec&lt;/th&gt;&#xD;&#xA;&lt;th align=&#34;right&#34;&gt;vs&lt;/th&gt;&#xD;&#xA;&lt;th align=&#34;right&#34;&gt;am&lt;/th&gt;&#xD;&#xA;&lt;th align=&#34;right&#34;&gt;gear&lt;/th&gt;&#xD;&#xA;&lt;th align=&#34;right&#34;&gt;carb&lt;/th&gt;&#xD;&#xA;&lt;/tr&gt;&#xD;&#xA;&lt;/thead&gt;&#xD;&#xA;&lt;tbody&gt;&#xD;&#xA;&lt;tr class=&#34;odd&#34;&gt;&#xD;&#xA;&lt;td align=&#34;left&#34;&gt;Mazda RX4&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;21.0&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;160&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;110&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;3.90&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;2.620&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;16.46&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;&#xD;&#xA;&lt;/tr&gt;&#xD;&#xA;&lt;tr class=&#34;even&#34;&gt;&#xD;&#xA;&lt;td align=&#34;left&#34;&gt;Mazda RX4 Wag&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;21.0&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;160&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;110&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;3.90&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;2.875&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;17.02&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;&#xD;&#xA;&lt;/tr&gt;&#xD;&#xA;&lt;tr class=&#34;odd&#34;&gt;&#xD;&#xA;&lt;td align=&#34;left&#34;&gt;Datsun 710&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;22.8&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;108&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;93&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;3.85&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;2.320&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;18.61&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;&#xD;&#xA;&lt;/tr&gt;&#xD;&#xA;&lt;tr class=&#34;even&#34;&gt;&#xD;&#xA;&lt;td align=&#34;left&#34;&gt;Hornet 4 Drive&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;21.4&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;258&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;110&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;3.08&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;3.215&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;19.44&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;&#xD;&#xA;&lt;/tr&gt;&#xD;&#xA;&lt;tr class=&#34;odd&#34;&gt;&#xD;&#xA;&lt;td align=&#34;left&#34;&gt;Hornet Sportabout&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;18.7&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;360&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;175&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;3.15&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;3.440&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;17.02&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;&#xD;&#xA;&lt;/tr&gt;&#xD;&#xA;&lt;tr class=&#34;even&#34;&gt;&#xD;&#xA;&lt;td align=&#34;left&#34;&gt;Valiant&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;18.1&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;225&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;105&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;2.76&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;3.460&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;20.22&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;&#xD;&#xA;&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;&#xD;&#xA;&lt;/tr&gt;&#xD;&#xA;&lt;/tbody&gt;&#xD;&#xA;&lt;/table&gt;&#xD;&#xA;&lt;p&gt;Let’s explore several ways.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Interactive diagrams in lieu of shiny?</title>
      <link>https://data-se.netlify.app/2017/11/27/interactive-diagrams-in-lieu-of-shiny/</link>
      <pubDate>Mon, 27 Nov 2017 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2017/11/27/interactive-diagrams-in-lieu-of-shiny/</guid>
      <description>&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/plotly-binding/plotly.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/typedarray/typedarray.min.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/jquery/jquery.min.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;link href=&#34;https://data-se.netlify.app/rmarkdown-libs/crosstalk/css/crosstalk.css&#34; rel=&#34;stylesheet&#34; /&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/crosstalk/js/crosstalk.min.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;link href=&#34;https://data-se.netlify.app/rmarkdown-libs/plotly-htmlwidgets-css/plotly-htmlwidgets.css&#34; rel=&#34;stylesheet&#34; /&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/plotly-main/plotly-latest.min.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;link href=&#34;https://data-se.netlify.app/rmarkdown-libs/bokehjs/bokeh.min.css&#34; rel=&#34;stylesheet&#34; /&gt;&#xD;&#xA;&lt;link href=&#34;https://data-se.netlify.app/rmarkdown-libs/bokehjs/loader.css&#34; rel=&#34;stylesheet&#34; /&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/bokehjs/bokeh.min.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/rbokeh-binding/rbokeh.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/d3v4/d3-4.13.0.min.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/d3v4/d3-legend.min.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;link href=&#34;https://data-se.netlify.app/rmarkdown-libs/d3.lasso-plugin/lasso.css&#34; rel=&#34;stylesheet&#34; /&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/d3.lasso-plugin/lasso.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;link href=&#34;https://data-se.netlify.app/rmarkdown-libs/scatterD3/scatterD3.css&#34; rel=&#34;stylesheet&#34; /&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/scatterD3/scatterD3-utils.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/scatterD3/scatterD3-setup.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/scatterD3/scatterD3-axes.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/scatterD3/scatterD3-dots.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/scatterD3/scatterD3-arrows.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/scatterD3/scatterD3-labels.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/scatterD3/scatterD3-lines.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/scatterD3/scatterD3-ellipses.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/scatterD3/scatterD3-legend.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/scatterD3/scatterD3-lasso.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/scatterD3/scatterD3-exports.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/scatterD3-binding/scatterD3.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/d3/d3.v3.min.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;link href=&#34;https://data-se.netlify.app/rmarkdown-libs/pairsD3/style.css&#34; rel=&#34;stylesheet&#34; /&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/pairsD3-binding/pairsD3.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/chart.js/./dist/Chart.min.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://data-se.netlify.app/rmarkdown-libs/chartJSRadar-binding/chartJSRadar.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;One frequent use of the Shiny server software is displaying interactive data diagrams. The pro of using&#xD;&#xA;Shiny is the great flexibility; much more than “just graphics” can be done. Basically Shiny provides a flexible&#xD;&#xA;GUI for your R program. &lt;em&gt;But&lt;/em&gt; if you simply aiming at displaying or exploring some data interactively, a much&#xD;&#xA;simplor approach may do it for you; there are some nice libraries available in R for that. The aim of this post is to present some examples, and to that’s easy to use them in R.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Replacing dplyr::do by purrr:map. Some considerations</title>
      <link>https://data-se.netlify.app/2017/09/05/purrr-map-no-do/</link>
      <pubDate>Tue, 05 Sep 2017 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2017/09/05/purrr-map-no-do/</guid>
      <description>&lt;p&gt;Hadley Wickham has announced to depreceate &lt;code&gt;dplyr::do&lt;/code&gt; in favor of &lt;code&gt;purrr:map&lt;/code&gt;. In a recent post, I have made use of &lt;code&gt;do&lt;/code&gt;, so some commentators informed me about that. In this post, I will show use cases of &lt;code&gt;map&lt;/code&gt;, specifically as a replacement of &lt;code&gt;do&lt;/code&gt;. &lt;code&gt;map&lt;/code&gt; is for lists; read more about lists &lt;a href=&#34;http://r4ds.had.co.nz/lists.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(tidyverse)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(broom)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We will use &lt;code&gt;mtcars&lt;/code&gt; as a sample dataframe (boring, I know, but convenient).&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;(mtcars)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;cor-is-a-function-that-takes-a-dataframe-as-its-input&#34;&gt;&lt;code&gt;Cor&lt;/code&gt; is a function that takes a dataframe as its input&lt;/h1&gt;&#xA;&lt;p&gt;As in the last post, assume we would like to conduct a correlation test. First, let&amp;rsquo;s start simple using &lt;code&gt;cor&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Comparing the pipe with base methods</title>
      <link>https://data-se.netlify.app/2017/08/31/some-pipes/</link>
      <pubDate>Thu, 31 Aug 2017 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2017/08/31/some-pipes/</guid>
      <description>&lt;p&gt;Some say, the pipe (#tidyverse) makes analyses in R easier. I agree. This post demonstrates some examples.&lt;/p&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s take the &lt;code&gt;mtcars&lt;/code&gt; dataset as an example.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;(mtcars)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;mtcars&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Say, we would like to compute the correlation between gasoline consumption (&lt;code&gt;mpg&lt;/code&gt;) and horsepower (&lt;code&gt;hp&lt;/code&gt;).&lt;/p&gt;&#xA;&lt;h2 id=&#34;base-approach-1&#34;&gt;Base approach 1&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;cor&lt;/span&gt;(mtcars[, &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mpg&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hp&amp;#34;&lt;/span&gt;)])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;##            mpg         hp&#xD;&#xA;## mpg  1.0000000 -0.7761684&#xD;&#xA;## hp  -0.7761684  1.0000000&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We use the &lt;code&gt;[&lt;/code&gt;-operator (function) to select the columns; note that &lt;code&gt;df[, c(col1, col2)]&lt;/code&gt; sees dataframes as matrices, and spits out a dataframe, not a vector:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming with dplyr: Part 03, working with strings</title>
      <link>https://data-se.netlify.app/2017/08/09/dplyr_strings/</link>
      <pubDate>Wed, 09 Aug 2017 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2017/08/09/dplyr_strings/</guid>
      <description>&lt;h1 id=&#34;more-on-programming-with-dplyr-converting-quosures-to-strings&#34;&gt;More on programming with dplyr: converting quosures to strings&lt;/h1&gt;&#xA;&lt;p&gt;In &lt;a href=&#34;https://sebastiansauer.github.io/prop_fav/&#34;&gt;this&lt;/a&gt; post, we have programmed a simple function using dplyr&amp;rsquo;s programming capabilities based on &lt;a href=&#34;https://cran.r-project.org/web/packages/rlang/vignettes/tidy-evaluation.html&#34;&gt;tidyeval&lt;/a&gt;; for more intro to programming with dplyr, see &lt;a href=&#34;https://cran.r-project.org/web/packages/dplyr/vignettes/programming.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;In this post, we&amp;rsquo;ll go one step further and programm a function where a quosure will be turned to a string. Why this? Because quite a number of functions out there except strings as input parameters.&lt;/p&gt;&#xA;&lt;h1 id=&#34;libraries&#34;&gt;Libraries&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(tidyverse)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(stringr)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;data-example&#34;&gt;Data example&lt;/h1&gt;&#xA;&lt;p&gt;Say, we have a string where we search for a word stem. However this stem does not appear in its &amp;ldquo;stem&amp;rdquo; form, but always with some suffixes. Let our stem be &amp;ldquo;spd&amp;rdquo; (the name of the German Social-Democratic party), and (for simplicity), we&amp;rsquo;ll assume two &amp;ldquo;instances&amp;rdquo; of &amp;ldquo;spd&amp;rdquo; that occurr &lt;em&gt;with&lt;/em&gt; suffix, ie., &amp;ldquo;spdbt&amp;rdquo; and &amp;ldquo;spdde&amp;rdquo;. (I was just working on a text mining on Tweets of German politiicians, hence the example).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming with dplyr: Part 02, writing a function</title>
      <link>https://data-se.netlify.app/2017/07/06/prop_fav/</link>
      <pubDate>Thu, 06 Jul 2017 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2017/07/06/prop_fav/</guid>
      <description>&lt;p&gt;Recently, since &lt;code&gt;dplyr&lt;/code&gt; &amp;lt;= 0.6.0 a new way of dealing with &lt;a href=&#34;http://adv-r.had.co.nz/Computing-on-the-language.html&#34;&gt;NSE&lt;/a&gt; was introduced, called &lt;a href=&#34;https://cran.r-project.org/web/packages/rlang/vignettes/tidy-evaluation.html&#34;&gt;tidyeval&lt;/a&gt;. As with every topic that begs our attention, the question &amp;ldquo;why bother&amp;rdquo; is in place. &lt;del&gt;The&lt;/del&gt;one answer is &amp;ldquo;you&amp;rsquo;ll need this stuff if you want to lock dplyr verbs inside a function&amp;rdquo;. Once you like &lt;code&gt;dplyr&lt;/code&gt; and friends, a natural second step is to use the ideas not only for interactive use, but for more &amp;ldquo;programming&amp;rdquo; type, ie., writing functions.&lt;/p&gt;</description>
    </item>
    <item>
      <title>A second look to grouping with dplyr</title>
      <link>https://data-se.netlify.app/2017/06/28/second_look_group_by/</link>
      <pubDate>Wed, 28 Jun 2017 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2017/06/28/second_look_group_by/</guid>
      <description>&lt;p&gt;&lt;del&gt;The&lt;/del&gt; one basic idea of dplyr is that each function should focus on one job. That&amp;rsquo;s why there are no functions such as &lt;code&gt;compute_sumamries_by_group_with_robust_variants(df)&lt;/code&gt;. Rather, summarising and grouping are seen as different jobs which should be accomplished by different functions. And, in turn, that&amp;rsquo;s why &lt;code&gt;group_by&lt;/code&gt;, the grouping function of dplyr, is of considerable importance: this function should do the grouping for each operation whatsoever.&lt;/p&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s load all tidyverse libraries in one go:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming with dplyr: Part 01, introduction</title>
      <link>https://data-se.netlify.app/2017/06/28/prog_dplyr_01/</link>
      <pubDate>Wed, 28 Jun 2017 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2017/06/28/prog_dplyr_01/</guid>
      <description>&lt;p&gt;Like for [others], Hadley Wickham&amp;rsquo;s &lt;code&gt;dplyr&lt;/code&gt;, and more generally, the &lt;code&gt;tidyverse&lt;/code&gt; approach has considerably changed the I do data analyses. Most notably, the pipe (coming from &lt;code&gt;magrittr&lt;/code&gt; by Stefan Milton Bache, see &lt;a href=&#34;https://cran.r-project.org/web/packages/magrittr/vignettes/magrittr.html&#34;&gt;here&lt;/a&gt;) has creeped into nearly every analyses I, do.&lt;/p&gt;&#xA;&lt;p&gt;That is, is every analyses &lt;em&gt;except for&lt;/em&gt; functions, and other non-interactive stuff. In those programming contexts, the dplyr way does not work, due to its &lt;a href=&#34;http://adv-r.had.co.nz/Computing-on-the-language.html&#34;&gt;non standard evaluation&lt;/a&gt; or NSE for short.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Sorting the x-axis in bargraphs using ggplot2</title>
      <link>https://data-se.netlify.app/2017/06/05/ordering-bars/</link>
      <pubDate>Mon, 05 Jun 2017 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2017/06/05/ordering-bars/</guid>
      <description>&lt;p&gt;Some time ago, I &lt;a href=&#34;https://sebastiansauer.github.io/percentage_plot_ggplot2_V2/&#34;&gt;posted about how to plot frequencies using ggplot2&lt;/a&gt;. One point that remained untouched was how to sort the order of the bars. Let&amp;rsquo;s look at that issue here.&lt;/p&gt;&#xA;&lt;p&gt;First, let&amp;rsquo;s load some data.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;(tips, package &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;reshape2&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And the usual culprits.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(tidyverse)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(scales)  &lt;span style=&#34;color:#75715e&#34;&gt;# for percentage scales&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;First, let&amp;rsquo;s plot a standard plot, with bars &lt;em&gt;un&lt;/em&gt;sorted.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tips &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt;(day) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;mutate&lt;/span&gt;(perc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nrow&lt;/span&gt;(tips)) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; tips2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;(tips2, &lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; day, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; perc)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_bar&lt;/span&gt;(stat &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;identity&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://sebastiansauer.github.io/images/2017-06-05/figure/unnamed-chunk-3-1.png&#34; alt=&#34;plot of chunk unnamed-chunk-3&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Einführung in die Datenanalyse mit R-Paket &#39;dplyr&#39; - R User Group Nürnberg</title>
      <link>https://data-se.netlify.app/2017/04/27/datenanalyse_mit_dplyr/</link>
      <pubDate>Thu, 27 Apr 2017 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2017/04/27/datenanalyse_mit_dplyr/</guid>
      <description>&lt;h1 id=&#34;datenjudo-mit-dplyr&#34;&gt;Datenjudo mit &lt;code&gt;dplyr&lt;/code&gt;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;einleitung&#34;&gt;Einleitung&lt;/h2&gt;&#xA;&lt;p&gt;Innerhalb der R-Landschaft hat sich das Paket &lt;a href=&#34;https://cran.r-project.org/web/packages/dplyr/index.html&#34;&gt;dplyr&lt;/a&gt; binnen kurzer Zeit zu einem der verbreitesten&#xA;Pakete entwickelt; es stellt ein innovatives Konzept der Datenanalyse&#xA;zur Verfügung. dplyr zeichnet sich durch zwei Ideen aus. Die erste Idee ist, dass&#xA;nur Tabellen (&amp;ldquo;dataframes&amp;rdquo; oder &amp;ldquo;tibbles&amp;rdquo;) verarbeitet werden, keine anderen Datenstrukturen. Diese Tabellen werden&#xA;von Funktion zu Funktion durchgereicht. Der Fokus auf Tabellen vereinfacht die&#xA;Analyse, da Spalten nicht einzeln oder mittels Schleifen werden müssen. Die zweite Idee ist, typische Tätigkeiten der Datenanalyse&#xA;anhand einer Taxonomie zu &amp;ldquo;grammatikalisieren&amp;rdquo;. Es lassen sich einige Bausteine identifizieren, mit der die typischen Aufgaben der Datenanalyse durchgeführt werden können. Der Workshop stellt beide Ideen von dplyr vor; dabei wird zuerst die Logik von dplyr erläutert ohne Rückgriff auf die R-Syntax. Danach wird die Funktionsweise von &lt;code&gt;dpyr&lt;/code&gt; praktisch eingeübt. Der Workshop dauert ca. 90-120 Minuten. Grundkenntnisse in R werden vorausgesetzt.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rowwise operations in dplyr</title>
      <link>https://data-se.netlify.app/2017/03/27/rowwise_dplyr/</link>
      <pubDate>Mon, 27 Mar 2017 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2017/03/27/rowwise_dplyr/</guid>
      <description>&lt;p&gt;R thinks columnwise, not rowwise, at least in standard dataframe operations. A typical &lt;em&gt;rowwise&lt;/em&gt; operation is to compute row means or row sums, for example to compute person sum scores for psychometric analyses.&lt;/p&gt;&#xA;&lt;p&gt;One workaround, typical for R, is to use functions such as &lt;code&gt;apply&lt;/code&gt; (and friends).&lt;/p&gt;&#xA;&lt;p&gt;However, &lt;code&gt;dplyr&lt;/code&gt; offers some quite nice alternative:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(dplyr)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mtcars &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;rowwise&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;mutate&lt;/span&gt;(mymean&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mean&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(cyl,mpg))) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;select&lt;/span&gt;(cyl, mpg, mymean)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;## Source: local data frame [32 x 3]&#xD;&#xA;## Groups: &amp;lt;by row&amp;gt;&#xD;&#xA;## &#xD;&#xA;## # A tibble: 32 × 3&#xD;&#xA;##      cyl   mpg mymean&#xD;&#xA;##    &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;&#xD;&#xA;## 1      6  21.0  13.50&#xD;&#xA;## 2      6  21.0  13.50&#xD;&#xA;## 3      4  22.8  13.40&#xD;&#xA;## 4      6  21.4  13.70&#xD;&#xA;## 5      8  18.7  13.35&#xD;&#xA;## 6      6  18.1  12.05&#xD;&#xA;## 7      8  14.3  11.15&#xD;&#xA;## 8      4  24.4  14.20&#xD;&#xA;## 9      4  22.8  13.40&#xD;&#xA;## 10     6  19.2  12.60&#xD;&#xA;## # ... with 22 more rows&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Convert list to dataframe</title>
      <link>https://data-se.netlify.app/2017/03/08/convert_list_to_dataframe/</link>
      <pubDate>Wed, 08 Mar 2017 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2017/03/08/convert_list_to_dataframe/</guid>
      <description>&lt;p&gt;A handy function to iterate stuff is the function &lt;code&gt;purrr::map&lt;/code&gt;. It takes a function and applies it to all elements of a given vector. This vector can be a data frame - which is a list, tecnically - or some other sort of of list (normal atomic vectors are fine, too).&lt;/p&gt;&#xA;&lt;p&gt;However, &lt;code&gt;purrr::map&lt;/code&gt; is designed to return &lt;em&gt;lists&lt;/em&gt; (not dataframes). For example, if you apply &lt;code&gt;mosaic::favstats&lt;/code&gt; to map, you will get some favorite statistics for some variable:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Visualizing Interaction Effects with ggplot2</title>
      <link>https://data-se.netlify.app/2017/01/17/vis_interaction_effects/</link>
      <pubDate>Tue, 17 Jan 2017 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2017/01/17/vis_interaction_effects/</guid>
      <description>&lt;p&gt;Moderator effects or interaction effect are a frequent topic of scientific endeavor. Put bluntly, such effects respond to the question whether the input variable X (predictor or independent variable IV) has an effect on the output variable (dependent variable DV) Y: &amp;ldquo;it depends&amp;rdquo;. More precisely, it depends on a second variable, M (Moderator).&lt;/p&gt;&#xA;&lt;p&gt;More formally, a moderation effect can be summarized as follows:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;If the effect of X on Y depends on M, a moderator effect takes place.&lt;/p&gt;</description>
    </item>
    <item>
      <title>EDIT: Running multiple simple regressions with purrr</title>
      <link>https://data-se.netlify.app/2016/09/26/edit-multiple_lm_purrr_edit/</link>
      <pubDate>Mon, 26 Sep 2016 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2016/09/26/edit-multiple_lm_purrr_edit/</guid>
      <description>&lt;p&gt;EDIT based on comments/ suggeestions from @JonoCarroll &lt;a href=&#34;https://disqus.com/by/JonoCarroll/?utm_source=reply&amp;amp;utm_medium=email&amp;amp;utm_content=comment_author&#34;&gt;Disqus profile&lt;/a&gt; and @tjmahr &lt;a href=&#34;https://twitter.com/tjmahr&#34;&gt;twitter profile&lt;/a&gt;. See below (last step; look for &amp;ldquo;EDIT&amp;rdquo;).&lt;/p&gt;&#xA;&lt;p&gt;Thanks for the input! &amp;#x1f44d;&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;reading time: 10 min.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;Hadley Wickham&amp;rsquo;s &lt;code&gt;purrr&lt;/code&gt; has given a new look at handling data structures to the typical R user (some reasoning suggests that average users doesn&amp;rsquo;t exist, but that&amp;rsquo;s a different story).&lt;/p&gt;&#xA;&lt;p&gt;I just tried the following with purrr:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Meditate about the running a simple regression, FWIW&lt;/li&gt;&#xA;&lt;li&gt;Take a dataframe with candidate predictors and an outcome&lt;/li&gt;&#xA;&lt;li&gt;Throw one predictor at a time into the regression, where the outcome variable remains the same (i.,e multiple simple regressions (one predictor) where the predictor is changed at each run but the outcome remains the same)&lt;/li&gt;&#xA;&lt;li&gt;tidy up the resulting $R^2$ in some nice format&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;I found that &lt;code&gt;purrr&lt;/code&gt; does the job nicely, and it&amp;rsquo;s quite instructive to see &lt;code&gt;purrr&lt;/code&gt;at work, I think. That&amp;rsquo;s why I wrote it up in this short post:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Running multiple simple regressions with purrr</title>
      <link>https://data-se.netlify.app/2016/09/23/multiple-lm-purrr2/</link>
      <pubDate>Fri, 23 Sep 2016 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2016/09/23/multiple-lm-purrr2/</guid>
      <description>&lt;p&gt;Hadley Wickham&amp;rsquo;s &lt;code&gt;purrr&lt;/code&gt; has given a new look at handling data structures to the typical R user (some reasoning suggests that average users don&amp;rsquo;t exist, but that&amp;rsquo;s a different story).&lt;/p&gt;&#xA;&lt;p&gt;I just tried the following with purrr:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Meditate about the running a simple regression, FWIW&lt;/li&gt;&#xA;&lt;li&gt;Take a dataframe with candidate predictors and an outcome&lt;/li&gt;&#xA;&lt;li&gt;Throw one predictor at a time into the regression, where the outcome variable remains the same (i.,e multiple simple regressions (one predictor) where the predictor is changed at each run but the outcome remains the same)&lt;/li&gt;&#xA;&lt;li&gt;tidy up the resulting $$ R^2 $$ in some nice format.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;I found that &lt;code&gt;purrr&lt;/code&gt; does the job nicely, and it&amp;rsquo;s quite instructive, I think. That&amp;rsquo;s why I wrote it up in this short post:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
