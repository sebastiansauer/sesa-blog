<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nse on sesa blog</title>
    <link>https://data-se.netlify.app/tags/nse/</link>
    <description>Recent content in Nse on sesa blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 16 Nov 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://data-se.netlify.app/tags/nse/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Some thoughts on tidyveal and environments in R</title>
      <link>https://data-se.netlify.app/2017/11/16/tidyeval_basense/</link>
      <pubDate>Thu, 16 Nov 2017 00:00:00 +0000</pubDate>
      <guid>https://data-se.netlify.app/2017/11/16/tidyeval_basense/</guid>
      <description>&lt;p&gt;The tidyeval framework is a rather new, and in parts complementary,&#xA;framework to dealing with non-standarde evaluation (NSE) in R. In short, NSE&#xA;is about capturing some R-code, witholding execution, maybe editing the code,&#xA;and finally execuing it later and/or somewhere else.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;This post borrows heavily by Edwin Thon&amp;rsquo;s great &lt;a href=&#34;https://edwinth.github.io/blog/nse/&#34;&gt;post&lt;/a&gt;, and &lt;a href=&#34;https://edwinth.github.io/blog/dplyr-recipes/&#34;&gt;this post&lt;/a&gt; by the same author.&lt;/p&gt;&#xA;&lt;p&gt;In addtion, most of the knowledge is derived from Hadley Wickham&amp;rsquo;s book &lt;a href=&#34;http://adv-r.had.co.nz/&#34;&gt;Advanced R&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;The typical base R culprits are &lt;code&gt;eval()&lt;/code&gt;, and &lt;code&gt;quote()&lt;/code&gt; or &lt;code&gt;substitute()&lt;/code&gt;,&#xA;respectively.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
